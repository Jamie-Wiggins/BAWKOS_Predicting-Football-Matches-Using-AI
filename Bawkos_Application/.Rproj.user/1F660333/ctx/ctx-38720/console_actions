{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "  a = k +379",
        "+ ",
        "  ",
        "+ ",
        "  date_groups <- unique(playing_statistics$Date[k:a])",
        "+ ",
        "  ",
        "+ ",
        "  # create empty league table to update",
        "+ ",
        "  Team <- unique(playing_statistics$HomeTeam[k:a])",
        "+ ",
        "  TP <- 0",
        "+ ",
        "  GD <- 0",
        "+ ",
        "  GS <- 0",
        "+ ",
        "  GC <- 0",
        "+ ",
        "  GP <- 0",
        "+ ",
        "  ",
        "+ ",
        "  league_table <- data.frame(Team, TP, GD, GS, GC, GP)",
        "+ ",
        "  ",
        "+ ",
        "  for (x in 1:(length(date_groups)-1)){",
        "+ ",
        "    tmp_league_table_values <- filter(league_table_values, Date ==date_groups[x])",
        "+ ",
        "    columnsReqLeague = c(\"HomeTeam\",\"TP_Home_Table\", \"TGS_Home_Table\", \"TGC_Home_Table\", \"TGD_Home_Table\",  \"N_Home_Game\", \"Date\")",
        "+ ",
        "    tmp_league_table_values[columnsReqLeague]",
        "+ ",
        "    ",
        "+ ",
        "    tmp_home <- tmp_league_table_values[c(\"HomeTeam\",\"TP_Home_Table\", \"TGS_Home_Table\", \"TGC_Home_Table\", \"TGD_Home_Table\",  \"N_Home_Game\", \"Date\")]",
        "+ ",
        "    ",
        "+ ",
        "    names(tmp_home)[names(tmp_home) == 'HomeTeam'] <- 'Team'",
        "+ ",
        "    names(tmp_home)[names(tmp_home) == 'TP_Home_Table'] <- 'TP'",
        "+ ",
        "    names(tmp_home)[names(tmp_home) == 'TGD_Home_Table'] <- 'GD'",
        "+ ",
        "    names(tmp_home)[names(tmp_home) == 'TGS_Home_Table'] <- 'GS'",
        "+ ",
        "    names(tmp_home)[names(tmp_home) == 'TGC_Home_Table'] <- 'GC'",
        "+ ",
        "    names(tmp_home)[names(tmp_home) == 'N_Home_Game'] <- 'GP'",
        "+ ",
        "    ",
        "+ ",
        "    tmp_home <- tmp_home[c(\"Team\",\"TP\",\"GD\", \"GS\", \"GC\", \"GP\")]",
        "+ ",
        "    ",
        "+ ",
        "    for (z in 1:nrow(tmp_home)){",
        "+ ",
        "      ind <- match(tmp_home$Team[z], league_table$Team)",
        "+ ",
        "      ",
        "+ ",
        "      league_table$TP[ind] <- tmp_home$TP[z]",
        "+ ",
        "      league_table$GD[ind] <- tmp_home$GD[z]",
        "+ ",
        "      league_table$GS[ind] <- tmp_home$GS[z]",
        "+ ",
        "      league_table$GC[ind] <- tmp_home$GC[z]",
        "+ ",
        "      league_table$GP[ind] <- tmp_home$GP[z]",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    league_table <- league_table[order(-league_table$TP,-league_table$GD,-league_table$GS,-league_table$GC),]",
        "+ ",
        "    ",
        "+ ",
        "    league_table$POS <- c(1:20)",
        "+ ",
        "    ",
        "+ ",
        "    Game_Count <- sum(league_table$GP)",
        "+ ",
        "    ",
        "+ ",
        "    GS_LG_Avg_Home <- sum(league_table$GS) / Game_Count",
        "+ ",
        "    GC_LG_Avg_Home <- sum(league_table$GS) / Game_Count",
        "+ ",
        "    ",
        "+ ",
        "    col_names_home2 = c(\"GS_LG_Avg_Home\",\"GC_LG_Avg_Home\")",
        "+ ",
        "    ",
        "+ ",
        "    # Now check the next date group and assign position values",
        "+ ",
        "    tmp_league_table_values2 <- filter(playing_statistics, Date == date_groups[x+1])",
        "+ ",
        "    ",
        "+ ",
        "    for(i in 1:nrow(tmp_league_table_values2)){",
        "+ ",
        "      # get home team",
        "+ ",
        "      home_team <- tmp_league_table_values2$HomeTeam[i]",
        "+ ",
        "      ",
        "+ ",
        "      home_team_values <- league_table[league_table$Team == home_team,] ",
        "+ ",
        "      ",
        "+ ",
        "      ind <- match(tmp_league_table_values2$GAME_NUM[i], playing_statistics$GAME_NUM)",
        "+ ",
        "      playing_statistics[ind, col_names_home2] <- c(GS_LG_Avg_Home, GC_LG_Avg_Home)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "################ Assign Away League Table values ################",
        "> ",
        "for (k in seq(from=1, to=7980, by=380)){",
        "+ ",
        "  a = k +379",
        "+ ",
        "  ",
        "+ ",
        "  date_groups <- unique(playing_statistics$Date[k:a])",
        "+ ",
        "  ",
        "+ ",
        "  # create empty league table to update",
        "+ ",
        "  Team <- unique(playing_statistics$AwayTeam[k:a])",
        "+ ",
        "  TP <- 0",
        "+ ",
        "  GD <- 0",
        "+ ",
        "  GS <- 0",
        "+ ",
        "  GC <- 0",
        "+ ",
        "  GP <- 0",
        "+ ",
        "  ",
        "+ ",
        "  league_table <- data.frame(Team, TP, GD, GS, GC, GP)",
        "+ ",
        "  ",
        "+ ",
        "  for (x in 1:(length(date_groups)-1)){",
        "+ ",
        "    tmp_league_table_values <- filter(league_table_values, Date ==date_groups[x])",
        "+ ",
        "    columnsReqLeague = c(\"AwayTeam\",\"TP_Away_Table\", \"TGS_Away_Table\", \"TGC_Away_Table\", \"TGD_Away_Table\", \"N_Away_Game\", \"Date\")",
        "+ ",
        "    tmp_league_table_values[columnsReqLeague]",
        "+ ",
        "    ",
        "+ ",
        "    tmp_Away <- tmp_league_table_values[c(\"AwayTeam\",\"TP_Away_Table\", \"TGS_Away_Table\", \"TGC_Away_Table\", \"TGD_Away_Table\", \"N_Away_Game\", \"Date\")]",
        "+ ",
        "    ",
        "+ ",
        "    names(tmp_Away)[names(tmp_Away) == 'AwayTeam'] <- 'Team'",
        "+ ",
        "    names(tmp_Away)[names(tmp_Away) == 'TP_Away_Table'] <- 'TP'",
        "+ ",
        "    names(tmp_Away)[names(tmp_Away) == 'TGD_Away_Table'] <- 'GD'",
        "+ ",
        "    names(tmp_Away)[names(tmp_Away) == 'TGS_Away_Table'] <- 'GS'",
        "+ ",
        "    names(tmp_Away)[names(tmp_Away) == 'TGC_Away_Table'] <- 'GC'",
        "+ ",
        "    names(tmp_Away)[names(tmp_Away) == 'N_Away_Game'] <- 'GP'",
        "+ ",
        "    ",
        "+ ",
        "    ",
        "+ ",
        "    tmp_Away <- tmp_Away[c(\"Team\",\"TP\",\"GD\", \"GS\", \"GC\",\"GP\")]",
        "+ ",
        "    ",
        "+ ",
        "    for (z in 1:nrow(tmp_Away)){",
        "+ ",
        "      ind <- match(tmp_Away$Team[z], league_table$Team)",
        "+ ",
        "      ",
        "+ ",
        "      league_table$TP[ind] <- tmp_Away$TP[z]",
        "+ ",
        "      league_table$GD[ind] <- tmp_Away$GD[z]",
        "+ ",
        "      league_table$GS[ind] <- tmp_Away$GS[z]",
        "+ ",
        "      league_table$GC[ind] <- tmp_Away$GC[z]",
        "+ ",
        "      league_table$GP[ind] <- tmp_Away$GP[z]",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    league_table <- league_table[order(-league_table$TP,-league_table$GD,-league_table$GS,-league_table$GC),]",
        "+ ",
        "    ",
        "+ ",
        "    league_table$POS <- c(1:20)",
        "+ ",
        "    ",
        "+ ",
        "    Game_Count <- sum(league_table$GP)",
        "+ ",
        "    ",
        "+ ",
        "    GS_LG_Avg_Away <- sum(league_table$GS) / Game_Count",
        "+ ",
        "    GC_LG_Avg_Away <- sum(league_table$GC) / Game_Count",
        "+ ",
        "",
        "+ ",
        "    col_names_Away2 <- c(\"GS_LG_Avg_Away\",\"GC_LG_Avg_Away\")",
        "+ ",
        "    ",
        "+ ",
        "    # Now check the next date group and assign position values",
        "+ ",
        "    tmp_league_table_values2 <- filter(playing_statistics, Date == date_groups[x+1])",
        "+ ",
        "    ",
        "+ ",
        "    for(i in 1:nrow(tmp_league_table_values2)){",
        "+ ",
        "      # get Away team",
        "+ ",
        "      Away_team <- tmp_league_table_values2$AwayTeam[i]",
        "+ ",
        "      ",
        "+ ",
        "      Away_team_values <- league_table[league_table$Team == Away_team,] ",
        "+ ",
        "      ",
        "+ ",
        "      ind <- match(tmp_league_table_values2$GAME_NUM[i], playing_statistics$GAME_NUM)",
        "+ ",
        "      playing_statistics[ind, col_names_Away2] <- c(GS_LG_Avg_Away, GC_LG_Avg_Away)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "################ Assign form against a particular team and general form ################",
        "> ",
        "for (k in 1:7980){",
        "+ ",
        "  home_team <- playing_statistics$HomeTeam[k]",
        "+ ",
        "  away_team <- playing_statistics$AwayTeam[k]",
        "+ ",
        "  ",
        "+ ",
        "  # identical fixture last 5",
        "+ ",
        "  same_fixtures <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == home_team & playing_statistics$AwayTeam == away_team)])[1:5]",
        "+ ",
        "  # all fixtures matching teams last 5",
        "+ ",
        "  all_fixtures <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & ((playing_statistics$HomeTeam == home_team & playing_statistics$AwayTeam == away_team) | (playing_statistics$HomeTeam == away_team & playing_statistics$AwayTeam == home_team))])[1:5]",
        "+ ",
        "  ",
        "+ ",
        "  all_fixtures_table <- playing_statistics[all_fixtures,c(\"HomeTeam\",\"AwayTeam\",\"AD\",\"HD\")]",
        "+ ",
        "  ",
        "+ ",
        "  #Form against specific opponent",
        "+ ",
        "  fixture_home_form <- sum(all_fixtures_table$HD[all_fixtures_table$HomeTeam == home_team],all_fixtures_table$AD[all_fixtures_table$AwayTeam == home_team])/nrow(all_fixtures_table)",
        "+ ",
        "  fixture_away_form <- fixture_home_form*-1",
        "+ ",
        "  ",
        "+ ",
        "  playing_statistics$FRM_VO_H[k] <- ifelse(is.na(fixture_home_form),0,fixture_home_form)",
        "+ ",
        "  playing_statistics$FRM_VO_A[k] <- ifelse(is.na(fixture_away_form),0,fixture_away_form)",
        "+ ",
        "  ",
        "+ ",
        "  #last five games for home team regardless of opposition",
        "+ ",
        "  all_fixtures_home_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == home_team | playing_statistics$AwayTeam == home_team)])[1:5]",
        "+ ",
        "  #last five home games for home team regardless of opposition",
        "+ ",
        "  home_fixtures_home_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == home_team)])[1:5]",
        "+ ",
        "  ",
        "+ ",
        "  #last five games for away team regardless of opposition",
        "+ ",
        "  all_fixtures_away_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == away_team | playing_statistics$AwayTeam == away_team)])[1:5]",
        "+ ",
        "  #last five away games for away team regardless of opposition",
        "+ ",
        "  away_fixtures_away_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$AwayTeam == away_team)])[1:5]",
        "+ ",
        "  ",
        "+ ",
        "  ovr_form_home <- playing_statistics[all_fixtures_home_team,c(\"HomeTeam\",\"AwayTeam\",\"AD\",\"HD\")] # home team form overall",
        "+ ",
        "  ovr_form_away <- playing_statistics[all_fixtures_away_team,c(\"HomeTeam\",\"AwayTeam\",\"AD\",\"HD\")] # away team form overall",
        "+ ",
        "  home_form_home <- playing_statistics[home_fixtures_home_team,c(\"HomeTeam\",\"AwayTeam\",\"AD\",\"HD\")] # home team form overall",
        "+ ",
        "  away_form_away <- playing_statistics[away_fixtures_away_team,c(\"HomeTeam\",\"AwayTeam\",\"AD\",\"HD\")] # away team form overall",
        "+ ",
        "  ",
        "+ ",
        "  #Form in last five games for home team regardless of opposition",
        "+ ",
        "  ovr_form_home_val <-sum(c(ovr_form_home$HD[which(ovr_form_home$HomeTeam==home_team)], ovr_form_home$AD[which(ovr_form_home$AwayTeam==home_team)]))/nrow(ovr_form_home)",
        "+ ",
        "  #Form in last five games for away team regardless of opposition",
        "+ ",
        "  ovr_form_away_val <-sum(c(ovr_form_away$HD[which(ovr_form_away$HomeTeam==away_team)], ovr_form_away$AD[which(ovr_form_away$AwayTeam==away_team)]))/nrow(ovr_form_away)",
        "+ ",
        "  #Form in last five home games for home team regardless of opposition",
        "+ ",
        "  home_form_val <-sum(c(home_form_home$HD[which(home_form_home$HomeTeam==home_team)], home_form_home$AD[which(home_form_home$AwayTeam==home_team)]))/nrow(home_form_home)",
        "+ ",
        "  #Form in last five away games for away team regardless of opposition",
        "+ ",
        "  away_form_val <-sum(c(away_form_away$HD[which(away_form_away$HomeTeam==away_team)], away_form_away$AD[which(away_form_away$AwayTeam==away_team)]))/nrow(away_form_away)",
        "+ ",
        "  ",
        "+ ",
        "  playing_statistics$OFRM_H[k] <- ovr_form_home_val",
        "+ ",
        "  playing_statistics$OFRM_A[k] <- ovr_form_away_val",
        "+ ",
        "  ",
        "+ ",
        "  playing_statistics$HFRM_H[k] <- home_form_val",
        "+ ",
        "  playing_statistics$AFRM_A[k] <- away_form_val",
        "+ ",
        "}",
        "> ",
        "########### new values ################",
        "> ",
        "playing_statistics$PD_H <- playing_statistics$TP_H - playing_statistics$TP_A # points difference home team",
        "> ",
        "playing_statistics$PD_A <- playing_statistics$TP_A - playing_statistics$TP_H # points difference away team",
        "> ",
        "playing_statistics$POSD_H <- playing_statistics$POS_H - playing_statistics$POS_A # place difference home team",
        "> ",
        "playing_statistics$POSD_A <- -playing_statistics$POSD_H # place difference away team",
        "> ",
        "playing_statistics$P90_Ovr_H <- playing_statistics$TP_H / playing_statistics$GW_H # points per 90 overall home team",
        "> ",
        "playing_statistics$P90_Ovr_A <- playing_statistics$TP_A / playing_statistics$GW_A # points per 90 overall away team",
        "> ",
        "playing_statistics$P90_home_H <- playing_statistics$TP_H / playing_statistics$N_Home_Game # points per 90 in home games for home team",
        "> ",
        "playing_statistics$P90_away_A <- playing_statistics$TP_A / playing_statistics$N_Away_Game # points per 90 in away games for away team",
        "> ",
        "playing_statistics$GS90_Over_H <- playing_statistics$TGS_H / playing_statistics$GW_H # goals scored per 90 home team",
        "> ",
        "playing_statistics$GS90_Over_A <- playing_statistics$TGS_A / playing_statistics$GW_A # goals scored per 90 away team",
        "> ",
        "playing_statistics$GS90_Home <- playing_statistics$TGS_Home_Table / playing_statistics$N_Home_Game # goals scored per 90 at home home team",
        "> ",
        "playing_statistics$GS90_Away <- playing_statistics$TGS_Away_Table / playing_statistics$N_Away_Game # goals scored per 90 away, away team",
        "> ",
        "playing_statistics$GC90_Over_H <- playing_statistics$TGC_H / playing_statistics$GW_H # goals conceded per 90 home team",
        "> ",
        "playing_statistics$GC90_Over_A <- playing_statistics$TGC_A / playing_statistics$GW_A # goals conceded per 90 away team",
        "> ",
        "playing_statistics$GC90_Home <- playing_statistics$TGC_Home_Table / playing_statistics$N_Home_Game # goals conceded per 90 at home, home team",
        "> ",
        "playing_statistics$GC90_Away <- playing_statistics$TGC_Away_Table / playing_statistics$N_Away_Game # goals conceded per 90 away, away team",
        "> ",
        "# ATT & DEF power ratings, used for XG check the website for calculation",
        "> ",
        "# Home team",
        "> ",
        "playing_statistics$ATT_H_ovr <- playing_statistics$GS90_Over_H / playing_statistics$GS_LG_Avg # overall",
        "> ",
        "playing_statistics$DEF_H_ovr <- playing_statistics$GC90_Over_H / playing_statistics$GC_LG_Avg # overall",
        "> ",
        "playing_statistics$ATT_H <- playing_statistics$GS90_Home / playing_statistics$GS_LG_Avg_Home # home",
        "> ",
        "playing_statistics$DEF_H <- playing_statistics$GC90_Home / playing_statistics$GC_LG_Avg_Home # home",
        "> ",
        "# Away",
        "> ",
        "playing_statistics$ATT_A_ovr <- playing_statistics$GC90_Over_A / playing_statistics$GS_LG_Avg # overall",
        "> ",
        "playing_statistics$DEF_A_ovr <- playing_statistics$GC90_Over_A / playing_statistics$GC_LG_Avg # overall",
        "> ",
        "playing_statistics$ATT_A <- playing_statistics$GS90_Away / playing_statistics$GS_LG_Avg_Away # away",
        "> ",
        "playing_statistics$DEF_A <- playing_statistics$GC90_Away / playing_statistics$GC_LG_Avg_Away # away",
        "> ",
        "# XG and XCG",
        "> ",
        "# Home",
        "> ",
        "playing_statistics$XG_OVR_H <- playing_statistics$GS_LG_Avg * playing_statistics$ATT_H_ovr * playing_statistics$DEF_A_ovr # overall",
        "> ",
        "playing_statistics$XGC_OVR_H <- playing_statistics$GC_LG_Avg * playing_statistics$ATT_A_ovr * playing_statistics$DEF_H_ovr # overall",
        "> ",
        "playing_statistics$XG_H <- playing_statistics$GS_LG_Avg_Home * playing_statistics$ATT_H * playing_statistics$DEF_A # Home def_a",
        "> ",
        "playing_statistics$XGC_H <- playing_statistics$GC_LG_Avg_Home * playing_statistics$ATT_A * playing_statistics$DEF_H # Home Att_a",
        "> ",
        "# Away",
        "> ",
        "playing_statistics$XG_OVR_A <- playing_statistics$GS_LG_Avg * playing_statistics$ATT_A_ovr * playing_statistics$DEF_H_ovr # overall",
        "> ",
        "playing_statistics$XGC_OVR_A <- playing_statistics$GC_LG_Avg * playing_statistics$ATT_H_ovr * playing_statistics$DEF_A_ovr # overall",
        "> ",
        "playing_statistics$XG_A <- playing_statistics$GS_LG_Avg_Away * playing_statistics$ATT_A * playing_statistics$DEF_H # away",
        "> ",
        "playing_statistics$XGC_A <- playing_statistics$GC_LG_Avg_Away * playing_statistics$ATT_H * playing_statistics$DEF_A # away",
        "> ",
        "playing_statistics$ELO_H <- 1000 # Home ELO",
        "> ",
        "playing_statistics$ELO_A <- 1000 # Away ELO",
        "> ",
        "playing_statistics$HOR_H <- 1000 # home off rating ",
        "> ",
        "playing_statistics$AOR_A <- 1000 # away off rating",
        "> ",
        "playing_statistics$HDR_H <- 1000 # home def rating",
        "> ",
        "playing_statistics$ADR_A <- 1000 # away def rating",
        "> ",
        "playing_statistics[playing_statistics == 'Inf'] <- 0",
        "> ",
        "playing_statistics[is.na(playing_statistics)] <- 0",
        "> ",
        "cols_xGNS_ovr_H <- c(\"FTHG\",\"P90_Ovr_H\",\"POSD_H\",\"PD_H\",\"HC\",\"HF\",\"OFRM_H\")#,\"HO\",\"HBP\",\"FRM_VO_H\") # feature selection column names",
        "> ",
        "cols_xGNS_ovr_A <- c(\"FTAG\",\"P90_Ovr_A\",\"POSD_A\",\"PD_A\",\"AC\",\"AF\",\"OFRM_A\")#,\"AO\",\"ABP\",\"FRM_VO_A\") # feature selection column names",
        "> ",
        "cols_xGNS_H <- c(\"FTHG\",\"P90_home_H\",\"HC\",\"HF\",\"HFRM_H\")#,\"HO\",\"HBP\",\"FRM_VO_H\") # feature selection column names",
        "> ",
        "cols_xGNS_A <- c(\"FTAG\",\"P90_away_A\",\"AC\",\"AF\",\"AFRM_A\")#,\"AO\",\"ABP\",\"FRM_VO_A\") # feature selection column names",
        "> ",
        "important_cols <- unique(c(cols_xGNS_ovr_H,cols_xGNS_ovr_A,cols_xGNS_H,cols_xGNS_A,\"SZN\"))",
        "> ",
        "summarised_table <- playing_statistics[,important_cols]",
        "> ",
        "for (season_n in 2001:2021){",
        "+ ",
        "  season_games <- summarised_table[which(summarised_table$SZN==season_n),]",
        "+ ",
        "  indexes <- which(summarised_table$SZN==season_n)",
        "+ ",
        "  summarised_table$P90_Ovr_H[indexes] <- ((season_games$P90_Ovr_H-mean(season_games$P90_Ovr_H))/sd(season_games$P90_Ovr_H))",
        "+ ",
        "  summarised_table$POSD_H[indexes] <- ((season_games$POSD_H-mean(season_games$POSD_H))/sd(season_games$POSD_H))",
        "+ ",
        "  summarised_table$PD_H[indexes] <- ((season_games$PD_H-mean(season_games$PD_H))/sd(season_games$PD_H))",
        "+ ",
        "  summarised_table$HC[indexes] <- ((season_games$HC-mean(season_games$HC))/sd(season_games$HC))",
        "+ ",
        "  summarised_table$HF[indexes] <- ((season_games$HF-mean(season_games$HF))/sd(season_games$HF))",
        "+ ",
        "  summarised_table$OFRM_H[indexes] <- ((season_games$OFRM_H-mean(season_games$OFRM_H))/sd(season_games$OFRM_H))",
        "+ ",
        " # summarised_table$FRM_VO_H[indexes] <- ((season_games$FRM_VO_H-mean(season_games$FRM_VO_H))/sd(season_games$FRM_VO_H))",
        "+ ",
        "",
        "+ ",
        "  summarised_table$P90_Ovr_A[indexes] <- ((season_games$P90_Ovr_A-mean(season_games$P90_Ovr_A))/sd(season_games$P90_Ovr_A))",
        "+ ",
        "  summarised_table$POSD_A[indexes] <- ((season_games$POSD_A-mean(season_games$POSD_A))/sd(season_games$POSD_A))",
        "+ ",
        "  summarised_table$PD_A[indexes] <- ((season_games$PD_A-mean(season_games$PD_A))/sd(season_games$PD_A))",
        "+ ",
        "  summarised_table$AC[indexes] <- ((season_games$AC-mean(season_games$AC))/sd(season_games$AC))",
        "+ ",
        "  summarised_table$AF[indexes] <- ((season_games$AF-mean(season_games$AF))/sd(season_games$AF))",
        "+ ",
        "  #summarised_table$FRM_VO_A[indexes] <- ((season_games$FRM_VO_A-mean(season_games$FRM_VO_A))/sd(season_games$FRM_VO_A))",
        "+ ",
        "}",
        "> ",
        "xGNS_ovr_H_features <- summarised_table[cols_xGNS_ovr_H]",
        "> ",
        "xGNS_ovr_A_features <- summarised_table[cols_xGNS_ovr_A]",
        "> ",
        "xGNS_H_features <- summarised_table[cols_xGNS_H]",
        "> ",
        "xGNS_A_features <- summarised_table[cols_xGNS_A]",
        "> ",
        "write.csv(xGNS_ovr_H_features,xGNS_ovr_H_features_file, row.names = FALSE)",
        "> ",
        "write.csv(xGNS_ovr_A_features,xGNS_ovr_A_features_file, row.names = FALSE)",
        "> ",
        "write.csv(xGNS_H_features,xGNS_H_features_file, row.names = FALSE)",
        "> ",
        "write.csv(xGNS_A_features,xGNS_A_features_file, row.names = FALSE)",
        "> ",
        "source(\"NN\\nn_xGNS.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        " cannot open file 'NN\nn_xGNS.R': Invalid argument\n",
        "> ",
        "source(\"NN\\nn_xGNS.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        " cannot open file 'NN\nn_xGNS.R': Invalid argument\n",
        "> ",
        "source(\"NN/nn_xGNS.R\")",
        "> ",
        "predict_xGNS_ovr_H <- nn_xGNS(FTHG~., xGNS_ovr_H_features, \"H\")",
        "Confusion Matrix and Statistics\n\n          Reference\nPrediction    0    1    2    3    4    5    6    7    8    9\n         0    0    0    0    0    0    0    0    0    0    0\n         1 1402 1692 1059  452  147   35   13    0    1    0\n         2  470  839  882  521  239   86   35   13    4    2\n         3    5   15   28   16   13    9    1    0    1    0\n         4    0    0    0    0    0    0    0    0    0    0\n         5    0    0    0    0    0    0    0    0    0    0\n         6    0    0    0    0    0",
        "    0    0    0    0    0\n         7    0    0    0    0    0    0    0    0    0    0\n         8    0    0    0    0    0    0    0    0    0    0\n         9    0    0    0    0    0    0    0    0    0    0\n\nOverall Statistics\n                                         \n               Accuracy : 0.3246         \n                 95% CI : (0.3143, 0.335)\n    No Information Rate : 0.319          \n    P-Value [Acc > NIR] : 0.1481         \n                                         \n                  Kappa : 0.0502         ",
        "\n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: 0 Class: 1 Class: 2 Class: 3 Class: 4 Class: 5\nSensitivity            0.0000   0.6646   0.4479 0.016178     0.00  0.00000\nSpecificity            1.0000   0.4279   0.6325 0.989701     1.00  1.00000\nPos Pred Value            NaN   0.3524   0.2853 0.181818      NaN      NaN\nNeg Pred Value         0.7648   0.7314   0.7777 0.876711     0.95  0.98371\nPrevalence             0.2352",
        "   0.3190   0.2467 0.123935     0.05  0.01629\nDetection Rate         0.0000   0.2120   0.1105 0.002005     0.00  0.00000\nDetection Prevalence   0.0000   0.6016   0.3873 0.011028     0.00  0.00000\nBalanced Accuracy      0.5000   0.5462   0.5402 0.502940     0.50  0.50000\n                     Class: 6 Class: 7  Class: 8  Class: 9\nSensitivity           0.00000 0.000000 0.0000000 0.0000000\nSpecificity           1.00000 1.000000 1.0000000 1.0000000\nPos Pred Value            NaN      NaN       NaN       NaN\nNeg Pred Value      ",
        "  0.99386 0.998371 0.9992481 0.9997494\nPrevalence            0.00614 0.001629 0.0007519 0.0002506\nDetection Rate        0.00000 0.000000 0.0000000 0.0000000\nDetection Prevalence  0.00000 0.000000 0.0000000 0.0000000\nBalanced Accuracy     0.50000 0.500000 0.5000000 0.5000000\n[1] 1.268423\n[1] 0.9284461\n",
        "> ",
        "predict_xGNS_H <- nn_xGNS(FTHG~., xGNS_H_features, \"H\")",
        "Confusion Matrix and Statistics\n\n          Reference\nPrediction    0    1    2    3    4    5    6    7    8    9\n         0    0    0    0    0    0    0    0    0    0    0\n         1 1339 1718 1134  488  177   44   16    2    1    0\n         2  533  807  787  467  203   75   29   10    4    2\n         3    5   21   48   34   19   11    4    1    1    0\n         4    0    0    0    0    0    0    0    0    0    0\n         5    0    0    0    0    0    0    0    0    0    0\n         6    0    0    0    0    0",
        "    0    0    0    0    0\n         7    0    0    0    0    0    0    0    0    0    0\n         8    0    0    0    0    0    0    0    0    0    0\n         9    0    0    0    0    0    0    0    0    0    0\n\nOverall Statistics\n                                         \n               Accuracy : 0.3182         \n                 95% CI : (0.308, 0.3285)\n    No Information Rate : 0.319          \n    P-Value [Acc > NIR] : 0.5709         \n                                         \n                  Kappa : 0.0409         ",
        "\n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: 0 Class: 1 Class: 2 Class: 3 Class: 4 Class: 5\nSensitivity            0.0000   0.6748  0.39970 0.034378     0.00  0.00000\nSpecificity            1.0000   0.4109  0.64565 0.984265     1.00  1.00000\nPos Pred Value            NaN   0.3493  0.26980 0.236111      NaN      NaN\nNeg Pred Value         0.7648   0.7295  0.76654 0.878127     0.95  0.98371\nPrevalence             0.2352",
        "   0.3190  0.24674 0.123935     0.05  0.01629\nDetection Rate         0.0000   0.2153  0.09862 0.004261     0.00  0.00000\nDetection Prevalence   0.0000   0.6164  0.36554 0.018045     0.00  0.00000\nBalanced Accuracy      0.5000   0.5429  0.52267 0.509322     0.50  0.50000\n                     Class: 6 Class: 7  Class: 8  Class: 9\nSensitivity           0.00000 0.000000 0.0000000 0.0000000\nSpecificity           1.00000 1.000000 1.0000000 1.0000000\nPos Pred Value            NaN      NaN       NaN       NaN\nNeg Pred Value      ",
        "  0.99386 0.998371 0.9992481 0.9997494\nPrevalence            0.00614 0.001629 0.0007519 0.0002506\nDetection Rate        0.00000 0.000000 0.0000000 0.0000000\nDetection Prevalence  0.00000 0.000000 0.0000000 0.0000000\nBalanced Accuracy     0.50000 0.500000 0.5000000 0.5000000\n[1] 1.296274\n[1] 0.952005\n",
        "> ",
        "predict_xGNS_ovr_A <- nn_xGNS(FTAG~., xGNS_ovr_A_features, \"A\")",
        "Confusion Matrix and Statistics\n\n          Reference\nPrediction    0    1    2    3    4    5    6    7    9\n         0    0    0    0    0    0    0    0    0    0\n         1 2548 2463 1291  545  152   38    7    0    0\n         2  152  269  262  138   58   23   12    1    1\n         3    2    1   10    1    2    1    0    1    0\n         4    0    0    0    1    0    0    1    0    0\n         5    0    0    0    0    0    0    0    0    0\n         6    0    0    0    0    0    0    0    0    0\n         7    0",
        "    0    0    0    0    0    0    0    0\n         9    0    0    0    0    0    0    0    0    0\n\nOverall Statistics\n                                          \n               Accuracy : 0.3416          \n                 95% CI : (0.3312, 0.3521)\n    No Information Rate : 0.3425          \n    P-Value [Acc > NIR] : 0.5697          \n                                          \n                  Kappa : 0.0246          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n",
        "                     Class: 0 Class: 1 Class: 2  Class: 3  Class: 4 Class: 5\nSensitivity            0.0000   0.9012  0.16763 0.0014599 0.0000000 0.000000\nSpecificity            1.0000   0.1269  0.89808 0.9976696 0.9997425 1.000000\nPos Pred Value            NaN   0.3497  0.28603 0.0555556 0.0000000      NaN\nNeg Pred Value         0.6614   0.7115  0.81583 0.9140919 0.9734269 0.992231\nPrevalence             0.3386   0.3425  0.19586 0.0858396 0.0265664 0.007769\nDetection Rate         0.0000   0.3086  0.03283 0.0001253",
        " 0.0000000 0.000000\nDetection Prevalence   0.0000   0.8827  0.11479 0.0022556 0.0002506 0.000000\nBalanced Accuracy      0.5000   0.5141  0.53285 0.4995647 0.4998713 0.500000\n                     Class: 6  Class: 7  Class: 9\nSensitivity          0.000000 0.0000000 0.0000000\nSpecificity          1.000000 1.0000000 1.0000000\nPos Pred Value            NaN       NaN       NaN\nNeg Pred Value       0.997494 0.9997494 0.9998747\nPrevalence           0.002506 0.0002506 0.0001253\nDetection Rate       0.000000 0.0000000",
        " 0.0000000\nDetection Prevalence 0.000000 0.0000000 0.0000000\nBalanced Accuracy    0.500000 0.5000000 0.5000000\n[1] 1.116576\n[1] 0.8216792\n",
        "> ",
        "predict_xGNS_A <- nn_xGNS(FTAG~., xGNS_A_features, \"A\")",
        "Confusion Matrix and Statistics\n\n          Reference\nPrediction    0    1    2    3    4    5    6    7    9\n         0    0    0    0    0    0    0    0    0    0\n         1 2531 2439 1335  548  151   40   10    1    1\n         2  171  294  228  137   61   22   10    1    0\n         3    0    0    0    0    0    0    0    0    0\n         4    0    0    0    0    0    0    0    0    0\n         5    0    0    0    0    0    0    0    0    0\n         6    0    0    0    0    0    0    0    0    0\n         7    0",
        "    0    0    0    0    0    0    0    0\n         9    0    0    0    0    0    0    0    0    0\n\nOverall Statistics\n                                          \n               Accuracy : 0.3342          \n                 95% CI : (0.3239, 0.3447)\n    No Information Rate : 0.3425          \n    P-Value [Acc > NIR] : 0.9419          \n                                          \n                  Kappa : 0.0129          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n",
        "                     Class: 0 Class: 1 Class: 2 Class: 3 Class: 4 Class: 5\nSensitivity            0.0000   0.8924  0.14587  0.00000  0.00000 0.000000\nSpecificity            1.0000   0.1201  0.89154  1.00000  1.00000 1.000000\nPos Pred Value            NaN   0.3457  0.24675      NaN      NaN      NaN\nNeg Pred Value         0.6614   0.6818  0.81080  0.91416  0.97343 0.992231\nPrevalence             0.3386   0.3425  0.19586  0.08584  0.02657 0.007769\nDetection Rate         0.0000   0.3056  0.02857  0.00000  0.00000",
        " 0.000000\nDetection Prevalence   0.0000   0.8842  0.11579  0.00000  0.00000 0.000000\nBalanced Accuracy      0.5000   0.5062  0.51871  0.50000  0.50000 0.500000\n                     Class: 6  Class: 7  Class: 9\nSensitivity          0.000000 0.0000000 0.0000000\nSpecificity          1.000000 1.0000000 1.0000000\nPos Pred Value            NaN       NaN       NaN\nNeg Pred Value       0.997494 0.9997494 0.9998747\nPrevalence           0.002506 0.0002506 0.0001253\nDetection Rate       0.000000 0.0000000 0.0000000\nDetection Prevalence",
        " 0.000000 0.0000000 0.0000000\nBalanced Accuracy    0.500000 0.5000000 0.5000000\n[1] 1.127743\n[1] 0.8327068\n",
        "> ",
        "playing_statistics$xGNS_ovr_H <- predict_xGNS_ovr_H$net.result",
        "> ",
        "playing_statistics$xGNS_H <- predict_xGNS_H$net.result",
        "> ",
        "playing_statistics$xGNS_ovr_A <- predict_xGNS_ovr_A$net.result",
        "> ",
        "playing_statistics$xGNS_A <- predict_xGNS_A$net.result",
        "> ",
        "# weighting formula for xG and NSxG",
        "> ",
        "playing_statistics$weight_att_p_H = ((2*playing_statistics$FTHG)-playing_statistics$xGNS_H)/(playing_statistics$XG_H-playing_statistics$xGNS_H) # home weight att",
        "> ",
        "playing_statistics$weight_att_p_A = ((2*playing_statistics$FTAG)-playing_statistics$xGNS_A)/(playing_statistics$XG_A-playing_statistics$xGNS_A) # Away weight att",
        "> ",
        "playing_statistics$weight_def_p_H = ((2*playing_statistics$FTAG)-playing_statistics$xGNS_A)/(playing_statistics$XGC_H-playing_statistics$xGNS_A) # home weight def",
        "> ",
        "playing_statistics$weight_def_p_A = ((2*playing_statistics$FTHG)-playing_statistics$xGNS_H)/(playing_statistics$XGC_A-playing_statistics$xGNS_H) # Away weight def",
        "> ",
        "# ELO xG's rating",
        "> ",
        "playing_statistics$weight_ELO_H = ((2*playing_statistics$FTHG)-playing_statistics$xGNS_ovr_H)/(playing_statistics$XG_OVR_H-playing_statistics$xGNS_ovr_H) # home weight",
        "> ",
        "playing_statistics$Weight_ELO_A = ((2*playing_statistics$FTHG)-playing_statistics$xGNS_ovr_A)/(playing_statistics$XG_OVR_A-playing_statistics$xGNS_ovr_A) # Away weight",
        "> ",
        "match_importance = 50",
        "> ",
        "for (k in seq(from=1, to=7980, by=380)){",
        "+ ",
        "  a = k +379",
        "+ ",
        "  ",
        "+ ",
        "  # set values to 1000 for k to a",
        "+ ",
        "  playing_statistics$ELO_H[k:a] <- 1000 # Home ELO",
        "+ ",
        "  playing_statistics$ELO_A[k:a] <- 1000 # Away ELO",
        "+ ",
        "  ",
        "+ ",
        "  playing_statistics$HOR_H[k:a] <- 1000 # home off rating ",
        "+ ",
        "  playing_statistics$AOR_A[k:a] <- 1000 # away off rating",
        "+ ",
        "  ",
        "+ ",
        "  playing_statistics$HDR_H[k:a] <- 1000 # home def rating",
        "+ ",
        "  playing_statistics$ADR_A[k:a] <- 1000 # away def rating",
        "+ ",
        "  ",
        "+ ",
        "  # from a to k",
        "+ ",
        "  for (j in k:a) {",
        "+ ",
        "  ",
        "+ ",
        "    home_team <- playing_statistics$HomeTeam[j]",
        "+ ",
        "    away_team <- playing_statistics$AwayTeam[j]",
        "+ ",
        "    ",
        "+ ",
        "    col_names_home <- c(\"ELO_H\",\"HOR_H\",\"HDR_H\") # added custom game weeks per team for later calcs",
        "+ ",
        "    col_names_away <- c(\"ELO_A\",\"AOR_A\",\"ADR_A\") # game week is total number of games home and away count separate",
        "+ ",
        "    ",
        "+ ",
        "    # Home",
        "+ ",
        "    playing_statistics$HOR_H[j] <- playing_statistics$HOR_H[j] + (playing_statistics$FTHG[j] - (playing_statistics$XG_H[j] + (playing_statistics$xGNS_H[j]/2))) # off",
        "+ ",
        "    playing_statistics$HDR_H[j] <- playing_statistics$HDR_H[j] + (playing_statistics$FTAG[j] - (playing_statistics$XGC_H[j] + (playing_statistics$xGNS_A[j]/2))) # def",
        "+ ",
        "    ",
        "+ ",
        "    # away",
        "+ ",
        "    playing_statistics$AOR_A[j] <- playing_statistics$AOR_A[j] + (playing_statistics$FTAG[j] - (playing_statistics$XG_A[j] + (playing_statistics$xGNS_A[j]/2))) # off",
        "+ ",
        "    playing_statistics$ADR_A[j] <- playing_statistics$AOR_A[j] + (playing_statistics$FTHG[j] - (playing_statistics$XGC_A[j] + (playing_statistics$xGNS_H[j]/2))) # def",
        "+ ",
        "    ",
        "+ ",
        "    # weights",
        "+ ",
        "    playing_statistics$Weight_H[j] <- (playing_statistics$HOR_H[j] - playing_statistics$ADR_A[j]) + (playing_statistics$HDR_H[j] - playing_statistics$AOR_A[j])",
        "+ ",
        "    playing_statistics$Weight_A[j] <- (playing_statistics$AOR_A[j] - playing_statistics$HDR_H[j]) + (playing_statistics$ADR_A[j] - playing_statistics$HOR_H[j])",
        "+ ",
        "    ",
        "+ ",
        "    playing_statistics$ELO_A[j] <- playing_statistics$ELO_A[j] + match_importance*(playing_statistics$FTAG[j] - playing_statistics$Weight_A[j]*(playing_statistics$XG_OVR_A[j] + (playing_statistics$xGNS_ovr_A[j]/2))) # overall",
        "+ ",
        "    playing_statistics$ELO_H[j] <- playing_statistics$ELO_H[j] + match_importance*(playing_statistics$FTHG[j] - playing_statistics$Weight_H[j]*(playing_statistics$XG_OVR_H[j] + (playing_statistics$xGNS_ovr_H[j]/2))) # overall",
        "+ ",
        "    ",
        "+ ",
        "    # Home",
        "+ ",
        "    home_vec <- c(playing_statistics$ELO_H[j], playing_statistics$HOR_H[j], playing_statistics$HDR_H[j])",
        "+ ",
        "    ",
        "+ ",
        "    # find the next fixture when team == home or away",
        "+ ",
        "    idx <- which((playing_statistics$HomeTeam == home_team | playing_statistics$AwayTeam == home_team) & playing_statistics$GAME_NUM > k)[1]",
        "+ ",
        "    ",
        "+ ",
        "    if(!is.na(idx)){",
        "+ ",
        "      col_names_vec <- if(playing_statistics$HomeTeam[idx]==home_team) col_names_home else col_names_away",
        "+ ",
        "      ",
        "+ ",
        "      playing_statistics[idx, col_names_vec] <- home_vec",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # away",
        "+ ",
        "    ",
        "+ ",
        "    away_vec <- c(playing_statistics$ELO_A[j], playing_statistics$HOR_A[j], playing_statistics$HDR_A[j])",
        "+ ",
        "    ",
        "+ ",
        "    # find the next fixture when team == home or away",
        "+ ",
        "    idx <- which((playing_statistics$HomeTeam == away_team | playing_statistics$AwayTeam == away_team) & playing_statistics$GAME_NUM > k)[1]  ",
        "+ ",
        "    ",
        "+ ",
        "    if(!is.na(idx)){",
        "+ ",
        "      col_names_vec <- if(playing_statistics$HomeTeam[idx]==away_team) col_names_home else col_names_away",
        "+ ",
        "      ",
        "+ ",
        "      playing_statistics[idx, col_names_vec] <- away_vec",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "test <- playing_statistics",
        "> ",
        "test <- test[c(\"HomeTeam\",\"ELO_H\",\"FTR\",\"ELO_A\",\"AwayTeam\")]",
        "> ",
        "test$test <- \"NA\"",
        "> ",
        "test$test <- ifelse((test$ELO_H > test$ELO_A & test$FTR == \"H\"), 1, ifelse((test$ELO_H < test$ELO_A & test$FTR == \"A\"), 1, 0))",
        "> ",
        "var <- cumsum(test$test[1:380])",
        "> ",
        "class_feature_cols <- c(\"FTR\",\"ELO_H\",\"ELO_A\") # feature selection column names",
        "> ",
        "reg_H_features_cols <- c(\"FTHG\",\"ELO_H\",\"ELO_A\") # feature selection column names",
        "> ",
        "reg_A_features_cols <- c(\"FTAG\",\"ELO_H\",\"ELO_A\") # feature selection column names",
        "> ",
        "class_feature_cols <- c(\"FTR\",\"ELO_H\",\"ELO_A\") # feature selection column names",
        "> ",
        "reg_H_features_cols <- c(\"FTHG\",\"ELO_H\",\"ELO_A\") # feature selection column names",
        "> ",
        "reg_A_features_cols <- c(\"FTAG\",\"ELO_H\",\"ELO_A\") # feature selection column names",
        "> ",
        "reg_A_features_cols <- c(\"FTAG\",\"ELO_H\",\"ELO_A\") # feature selection column names",
        "> ",
        "summarised_class_feat_table <- playing_statistics[,unique(c(\"HomeTeam\",\"AwayTeam\",\"SZN\",\"GAME_NUM\",class_feature_cols,reg_H_features_cols,reg_A_features_cols))]",
        "> ",
        "# Delete first 5 games used to calculate form for each team to avoid inaccruaries due to form calculations",
        "> ",
        "remove_first_five <- function(table){",
        "+ ",
        "  deleted_rows <- c()",
        "+ ",
        "  team_list <- unique(c(table$HomeTeam,table$AwayTeam))",
        "+ ",
        "  for(team in team_list){",
        "+ ",
        "    deleted_rows<- c(deleted_rows,table$GAME_NUM[which(table$HomeTeam == team | table$AwayTeam== team)][1:5])",
        "+ ",
        "  }",
        "+ ",
        "  unique(deleted_rows)",
        "+ ",
        "}",
        "> ",
        "all_deletions <- c()",
        "> ",
        "for (i in SEASONS){",
        "+ ",
        "  all_deletions<- c(all_deletions,remove_first_five(summarised_class_feat_table[which(summarised_class_feat_table$SZN==i),]))",
        "+ ",
        "}",
        "> ",
        "all_deletions <- unique(all_deletions)",
        "> ",
        "summarised_class_feat_table <- summarised_class_feat_table[-all_deletions,]",
        "> ",
        "summarised_class_feat_table <- summarised_class_feat_table[-which(summarised_class_feat_table$SZN==2001),]",
        "> ",
        "class_feature <- summarised_class_feat_table[class_feature_cols]",
        "> ",
        "reg_H_features <- summarised_class_feat_table[reg_H_features_cols]",
        "> ",
        "reg_A_features <- summarised_class_feat_table[reg_A_features_cols]",
        "> ",
        "#File names",
        "> ",
        "class_feature_file <- paste(getwd(),MODELTYPE,\"class_feature.csv\",sep = \"/\")",
        "> ",
        "reg_H_features_file <- paste(getwd(),MODELTYPE,\"reg_H_features.csv\",sep = \"/\")",
        "> ",
        "reg_A_features_file <- paste(getwd(),MODELTYPE,\"reg_A_features.csv\",sep = \"/\")",
        "> ",
        "#Write class features for NN",
        "> ",
        "write.csv(class_feature,class_feature_file, row.names = FALSE)",
        "> ",
        "write.csv(reg_H_features,reg_H_features_file, row.names = FALSE)",
        "> ",
        "write.csv(reg_A_features,reg_A_features_file, row.names = FALSE)",
        "> ",
        "",
        "> ",
        "##### Packages #####",
        "> ",
        "install.packages(\"dplyr\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"plyr\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "#install.packages(\"neuralnet\")",
        "> ",
        "install.packages(\"caret\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "library(plyr)",
        "---------------------------------------------------------------------------\n",
        "You have loaded plyr after dplyr - this is likely to cause problems.\nIf you need functions from both plyr and dplyr, please load plyr first, then dplyr:\nlibrary(plyr); library(dplyr)\n",
        "---------------------------------------------------------------------------\n",
        "\nAttaching package: ‘plyr’\n\n",
        "The following object is masked from ‘package:purrr’:\n\n    compact\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise,\n    summarize\n\n",
        "> ",
        "library(dplyr)",
        "> ",
        "library(neuralnet)",
        "> ",
        "library(caret)",
        "> ",
        "",
        "> ",
        "#neural_network <- function() {",
        "> ",
        "##### Set Seed #####",
        "> ",
        "# Seed is set so that the results can be reproduced for marking",
        "> ",
        "set.seed(1773894103)",
        "> ",
        "",
        "> ",
        "##### Load Files #####",
        "> ",
        "source_dir <- paste(getwd(),\"class_feature.csv\",sep = \"/\") # path location of files",
        "> ",
        "",
        "> ",
        "# read in CSV data",
        "> ",
        "data <- read.csv(file=source_dir)",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(file, \"rt\") :",
        "\n ",
        " cannot open file 'C:/Users/jamie.DESKTOP-7TF9QFI/OneDrive/Documents/COM3018_Code/ProjectBawkos_Group_I/class_feature.csv': No such file or directory\n",
        "> ",
        "unseen_cut = length(data$FTR)-379",
        "Error in data$FTR : object of type 'closure' is not subsettable\n",
        "> ",
        "unseen_data <- data[unseen_cut:length(data$FTR),]",
        "Error: object 'unseen_cut' not found\n",
        "> ",
        "data <- data[1:unseen_cut,]",
        "Error: object 'unseen_cut' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##### Neural Network Model Fitting #####",
        "> ",
        "#cv.error <- NULL",
        "> ",
        "#k <- 10",
        "> ",
        "#maxs <- apply(data, 2, max) ",
        "> ",
        "#mins <- apply(data, 2, min)",
        "> ",
        "#scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))",
        "> ",
        "",
        "> ",
        "#pbar <- create_progress_bar('text')",
        "> ",
        "#pbar$init(k)",
        "> ",
        "#for(i in 1:k){",
        "> ",
        "#  index <- sample(1:nrow(data),round(0.9*nrow(data)))",
        "> ",
        "#  train.cv <- scaled[index,]",
        "> ",
        "#  test.cv <- scaled[-index,]",
        "> ",
        "#  nn <- neuralnet(FTR~.,data=train.cv,hidden=1,stepmax=1e7,act.fct = \"logistic\",linear.output=TRUE)   ",
        "> ",
        "#  pr.nn <- compute(nn,test.cv[,1:3])",
        "> ",
        "#  pr.nn <- pr.nn$net.result*(max(data$FTR)-min(data$FTR))+min(data$FTR)   ",
        "> ",
        "#  test.cv.r <- (test.cv$FTR)*(max(data$FTR)-min(data$FTR))+min(data$FTR)   ",
        "> ",
        "#  cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)    ",
        "> ",
        "#  pbar$step()",
        "> ",
        "#}",
        "> ",
        "",
        "> ",
        "#### Neural Network Model no fitting ####",
        "> ",
        "nn = neuralnet(FTR~.,",
        "+ ",
        "               data=data,",
        "+ ",
        "               hidden=1,",
        "+ ",
        "               stepmax=1e7,",
        "+ ",
        "               act.fct = \"logistic\",",
        "+ ",
        "               linear.output = TRUE",
        "+ ",
        "               )",
        "Error in terms.formula(formula, data = data) : \n  'data' argument is of the wrong type\n",
        "> ",
        "",
        "> ",
        "##### Measuring Model #####",
        "> ",
        "plot(nn)",
        "Error in plot(nn) : object 'nn' not found\n",
        "> ",
        "Predict=neuralnet::compute(nn,unseen_data)",
        "Error in predict.nn(x, newdata = covariate, rep = rep, all.units = TRUE) : \n  object 'nn' not found\n",
        "> ",
        "overall <- data.frame(Predict$net.result, unseen_data$FTR)",
        "Error in data.frame(Predict$net.result, unseen_data$FTR) : \n  object 'Predict' not found\n",
        "> ",
        "overall$Predict.net.result <- overall$Predict.net.result*3",
        "Error: object 'overall' not found\n",
        "> ",
        "overall$True_Value <- ifelse(round(overall$Predict.net.result, digits=0) >= 2, 3,",
        "+ ",
        "                             ifelse(round(overall$Predict.net.result, digits=0) < 2 &&",
        "+ ",
        "                                      round(overall$Predict.net.result, digits=0) > 0.5, 1,",
        "+ ",
        "                                    ifelse(round(overall$Predict.net.result, digits=0) < 0.5, 0, FALSE)))",
        "Error in ifelse(round(overall$Predict.net.result, digits = 0) >= 2, 3,  : \n  object 'overall' not found\n",
        "> ",
        "overall$Winner <- ifelse(overall$True_Value == unseen_data$FTR, TRUE, FALSE)",
        "Error in ifelse(overall$True_Value == unseen_data$FTR, TRUE, FALSE) : \n  object 'overall' not found\n",
        "> ",
        "",
        "> ",
        "print((sum(overall$Winner == TRUE)/length(unseen_data$FTR))*100)",
        "Error in print((sum(overall$Winner == TRUE)/length(unseen_data$FTR)) *  : \n  object 'overall' not found\n",
        "> ",
        "",
        "> ",
        "matrix <- confusionMatrix(factor(overall$True_Value, levels=c(\"0\", \"1\", \"3\")),",
        "+ ",
        "                          as.factor(unseen_data$FTR))",
        "Error in factor(overall$True_Value, levels = c(\"0\", \"1\", \"3\")) : \n  object 'overall' not found\n",
        "> ",
        "rmse = RMSE(overall$True_Value, unseen_data$FTR)",
        "Error in mean((pred - obs)^2, na.rm = na.rm) : object 'overall' not found\n",
        "> ",
        "mae = MAE(overall$True_Value, unseen_data$FTR)",
        "Error in mean(abs(pred - obs), na.rm = na.rm) : \n  object 'overall' not found\n",
        "> ",
        "print(rmse)",
        "function (data, ...) \n{\n    UseMethod(\"rmse\")\n}\n<bytecode: 0x0000022da4a11d78>\n<environment: namespace:yardstick>\nattr(,\"direction\")\n[1] \"minimize\"\nattr(,\"class\")\n[1] \"numeric_metric\" \"metric\"         \"function\"      \n",
        "> ",
        "print(mae)",
        "[1] 1.087386\n",
        "> ",
        "print(matrix)",
        "function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) \n{\n    if (is.object(data) || !is.atomic(data)) \n        data <- as.vector(data)\n    .Internal(matrix(data, nrow, ncol, byrow, dimnames, missing(nrow), \n        missing(ncol)))\n}\n<bytecode: 0x0000022d8eb4b760>\n<environment: namespace:base>\n",
        "> ",
        "",
        "> ",
        "r_squared = R2(overall$True_Value, unseen_data$FTR)",
        "Error in complete.cases(pred) : object 'overall' not found\n",
        "> ",
        "mse = mean((unseen_data$FTR - overall$True_Value)**2)",
        "Error in mean((unseen_data$FTR - overall$True_Value)^2) : \n  object 'unseen_data' not found\n",
        "> ",
        "print(r_squared)",
        "Error in print(r_squared) : object 'r_squared' not found\n",
        "> ",
        "print(mse)",
        "[1] 2.356383\n",
        "> ",
        "#}",
        "\nRestarting R session...\n\n"
    ]
}