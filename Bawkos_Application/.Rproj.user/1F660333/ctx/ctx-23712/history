tmp_overall$N_HL = cumsum(tmp_overall$N_HL)
tmp_overall$N_AW = cumsum(tmp_overall$N_AW)
tmp_overall$N_ADraws = cumsum(tmp_overall$N_ADraws)
tmp_overall$N_AL = cumsum(tmp_overall$N_AL)
tmp_overall$TS = cumsum(tmp_overall$TS)
tmp_overall$TS = cumsum(tmp_overall$TST)
tmp_overall$TS = cumsum(tmp_overall$TSA)
tmp_overall$TS = cumsum(tmp_overall$TSTA)
col_names_home = c("TP_H", "TGS_H", "TGC_H", "TGD_H", "GW_H", "N_Home_Game", "N_HW_Home", "N_HDraws_Home", "N_HL_Home", "N_AW_Home", "N_ADraws_Home",
"N_AL_Home", "TS_Home","TST_Home","TSA_Home","TSTA_Home")
col_names_away = c("TP_A", "TGS_A", "TGC_A", "TGD_A", "GW_A", "N_Away_Game", "N_HW_Away", "N_HDraws_Away", "N_HL_Away", "N_AW_Away", "N_ADraws_Away",
"N_AL_Away","TS_Away","TST_Away","TSA_Away","TSTA_Away")
# Assign values to league table data frame
for (i in 1:38){
col_names_vec <- if(tmp_overall$HomeTeam[i]==x) col_names_home else col_names_away
home_vec <- c(tmp_overall$TP[i], tmp_overall$GS[i], tmp_overall$GC[i], tmp_overall$GD[i], tmp_overall$GW_H[i], tmp_overall$N_Home_Game[i],tmp_overall$N_HW[i],tmp_overall$N_HDraws[i],
tmp_overall$N_HL[i],tmp_overall$N_AW[i],tmp_overall$N_ADraws[i],tmp_overall$N_AL[i],tmp_overall$TS[i], tmp_overall$TST[i], tmp_overall$TSA[i], tmp_overall$TSTA[i])
away_vec <- c(tmp_overall$TP[i], tmp_overall$GS[i], tmp_overall$GC[i], tmp_overall$GD[i], tmp_overall$GW_A[i], tmp_overall$N_Away_Game[i],tmp_overall$N_HW[i],tmp_overall$N_HDraws[i],
tmp_overall$N_HL[i],tmp_overall$N_AW[i],tmp_overall$N_ADraws[i],tmp_overall$N_AL[i],tmp_overall$TS[i], tmp_overall$TST[i], tmp_overall$TSA[i], tmp_overall$TSTA[i])
vec <- if(tmp_overall$HomeTeam[i]==x) home_vec else away_vec
ind <- match(tmp_overall$GAME_NUM[i], league_table_values$GAME_NUM)
league_table_values[ind, col_names_vec] <- vec
}
# Assign values to playing statistics data frame
for (i in 1:37){
col_names_vec <- if(tmp_overall$HomeTeam[i+1]==x) col_names_home else col_names_away
home_vec <- c(tmp_overall$TP[i], tmp_overall$GS[i], tmp_overall$GC[i], tmp_overall$GD[i], tmp_overall$GW_H[i], tmp_overall$N_Home_Game[i],tmp_overall$N_HW[i],tmp_overall$N_HDraws[i],
tmp_overall$N_HL[i],tmp_overall$N_AW[i],tmp_overall$N_ADraws[i],tmp_overall$N_AL[i],tmp_overall$TS[i], tmp_overall$TST[i], tmp_overall$TSA[i], tmp_overall$TSTA[i])
away_vec <- c(tmp_overall$TP[i], tmp_overall$GS[i], tmp_overall$GC[i], tmp_overall$GD[i], tmp_overall$GW_A[i], tmp_overall$N_Away_Game[i],tmp_overall$N_HW[i],tmp_overall$N_HDraws[i],
tmp_overall$N_HL[i],tmp_overall$N_AW[i],tmp_overall$N_ADraws[i],tmp_overall$N_AL[i],tmp_overall$TS[i], tmp_overall$TST[i], tmp_overall$TSA[i], tmp_overall$TSTA[i])
vec <- if(tmp_overall$HomeTeam[i]==x) home_vec else away_vec
ind <- match(tmp_overall$GAME_NUM[i+1], playing_statistics$GAME_NUM)
playing_statistics[ind, col_names_vec] <- vec
}
# home and away league table values
tmp_home$TP = cumsum(tmp_home$TP)
tmp_home$GS = cumsum(tmp_home$GS)
tmp_home$GC = cumsum(tmp_home$GC)
tmp_home$GD = tmp_home$GS - tmp_home$GC
tmp_away$TP = cumsum(tmp_away$TP)
tmp_away$GS = cumsum(tmp_away$GS)
tmp_away$GC = cumsum(tmp_away$GC)
tmp_away$GD = tmp_away$GS - tmp_away$GC
col_names_home = c("TP_Home_Table", "TGS_Home_Table", "TGC_Home_Table", "TGD_Home_Table") # added custom game weeks per team for later calcs
col_names_away = c("TP_Away_Table", "TGS_Away_Table", "TGC_Away_Table", "TGD_Away_Table") # game week is total number of games home and away count separate
# home and away tables values for league table data frame
for (i in 1:19){
# home
home_vec <- c(tmp_home$TP[i], tmp_home$GS[i], tmp_home$GC[i], tmp_home$GD[i])
ind <- match(tmp_home$GAME_NUM[i], league_table_values$GAME_NUM)
league_table_values[ind, col_names_home] <- home_vec
# away
away_vec <- c(tmp_away$TP[i], tmp_away$GS[i], tmp_away$GC[i], tmp_away$GD[i])
ind <- match(tmp_away$GAME_NUM[i], league_table_values$GAME_NUM)
league_table_values[ind, col_names_away] <- away_vec
}
# home and away tables values for playing statistics
for (i in 1:18){
# home
home_vec <- c(tmp_home$TP[i], tmp_home$GS[i], tmp_home$GC[i], tmp_home$GD[i])
ind <- match(tmp_home$GAME_NUM[i], playing_statistics$GAME_NUM)
playing_statistics[ind, col_names_home] <- home_vec
# away
away_vec <- c(tmp_away$TP[i], tmp_away$GS[i], tmp_away$GC[i], tmp_away$GD[i])
ind <- match(tmp_away$GAME_NUM[i], playing_statistics$GAME_NUM)
playing_statistics[ind, col_names_away] <- away_vec
}
}
season = season + 1
}
################ Assign League Table values ################
# Loop through one season at a time
for (k in seq(from=1, to=7980, by=380)){
a = k +379
date_groups <- unique(playing_statistics$Date[k:a]) # create groups by date for a given season
# Create empty league tables to update
Team <- unique(playing_statistics$HomeTeam[k:a])
TP <- 0
GD <- 0
GS <- 0
GC <- 0
league_table <- data.frame(Team, TP, GD, GS, GC)
# Loop through date groups
for (x in 1:(length(date_groups)-1)){
tmp_league_table_values <- filter(league_table_values, Date ==date_groups[x])
columnsReqLeague = c("HomeTeam","AwayTeam","TP_H", "TP_A", "TGS_H", "TGS_A", "TGC_H", "TGC_A", "TGD_H", "TGD_A", "N_Home_Game", "N_Away_Game", "Date")
tmp_league_table_values[columnsReqLeague]
tmp_home <- tmp_league_table_values[c("HomeTeam","TP_H", "TGS_H", "TGC_H","TGD_H", "N_Home_Game", "N_HW_Home", "N_HDraws_Home", "N_HL_Home", "N_AW_Home", "N_ADraws_Home", "N_AL_Home", "Date")]
tmp_away <- tmp_league_table_values[c("AwayTeam", "TP_A", "TGS_A", "TGC_A","TGD_A", "N_Away_Game","N_Away_Game", "N_HW_Away", "N_HDraws_Away", "N_HL_Away", "N_AW_Away", "N_ADraws_Away", "N_AL_Away", "Date")]
# Rename Home Cols
names(tmp_home)[names(tmp_home) == 'HomeTeam'] <- 'Team'
names(tmp_home)[names(tmp_home) == 'TP_H'] <- 'TP'
names(tmp_home)[names(tmp_home) == 'TGD_H'] <- 'GD'
names(tmp_home)[names(tmp_home) == 'TGS_H'] <- 'GS'
names(tmp_home)[names(tmp_home) == 'TGC_H'] <- 'GC'
names(tmp_home)[names(tmp_home) == 'N_Home_Game'] <- 'GP' # games played
names(tmp_home)[names(tmp_home) == 'N_HW_Home'] <- 'Home Wins'
names(tmp_home)[names(tmp_home) == 'N_HDraws_Home'] <- 'Home Draws'
names(tmp_home)[names(tmp_home) == 'N_HL_Home'] <- 'Home Losses'
names(tmp_home)[names(tmp_home) == 'N_AW_Home'] <- 'Away Wins'
names(tmp_home)[names(tmp_home) == 'N_ADraws_Home'] <- 'Away Draws'
names(tmp_home)[names(tmp_home) == 'N_AL_Home'] <- 'Away Losses'
# Rename Away Cols
names(tmp_away)[names(tmp_away) == 'AwayTeam'] <- 'Team'
names(tmp_away)[names(tmp_away) == 'TP_A'] <- 'TP'
names(tmp_away)[names(tmp_away) == 'TGD_A'] <- 'GD'
names(tmp_away)[names(tmp_away) == 'TGS_A'] <- 'GS'
names(tmp_away)[names(tmp_away) == 'TGC_A'] <- 'GC'
names(tmp_away)[names(tmp_away) == 'N_Away_Game'] <- 'GP'
names(tmp_away)[names(tmp_away) == 'N_HW_Away'] <- 'Home Wins'
names(tmp_away)[names(tmp_away) == 'N_HDraws_Away'] <- 'Home Draws'
names(tmp_away)[names(tmp_away) == 'N_HL_Away'] <- 'Home Losses'
names(tmp_away)[names(tmp_away) == 'N_AW_Away'] <- 'Away Wins'
names(tmp_away)[names(tmp_away) == 'N_ADraws_Away'] <- 'Away Draws'
names(tmp_away)[names(tmp_away) == 'N_AL_Away'] <- 'Away Losses'
tmp_home <- tmp_home[c("Team","TP","GD", "GS", "GC", "GP", "Home Wins", "Home Draws", "Home Losses", "Away Wins", "Away Draws", "Away Losses")]
tmp_away <- tmp_away[c("Team","TP","GD", "GS", "GC", "GP", "Home Wins", "Home Draws", "Home Losses", "Away Wins", "Away Draws", "Away Losses")]
league_table_update <- rbind(tmp_home,tmp_away)
# Assign league table values
for (z in 1:nrow(league_table_update)){
ind <- match(league_table_update$Team[z], league_table$Team)
league_table$TP[ind] <- league_table_update$TP[z]
league_table$GD[ind] <- league_table_update$GD[z]
league_table$GS[ind] <- league_table_update$GS[z]
league_table$GC[ind] <- league_table_update$GC[z]
league_table$GP[ind] <- league_table_update$GP[z]
league_table$`Home Wins`[ind] <- league_table_update$`Home Wins`[z]
league_table$`Home Draws`[ind] <- league_table_update$`Home Draws`[z]
league_table$`Home Losses`[ind] <- league_table_update$`Home Losses`[z]
league_table$`Away Wins`[ind] <- league_table_update$`Away Wins`[z]
league_table$`Away Draws`[ind] <- league_table_update$`Away Draws`[z]
league_table$`Away Losses`[ind] <- league_table_update$`Away Losses`[z]
}
league_table <- league_table[order(-league_table$TP,-league_table$GD,-league_table$GS,-league_table$GC),] # order the league table
league_table$POS <- c(1:20) # Assign league position
# League values for date groups
Game_Count <- sum(league_table$GP)
GS_LG_Avg <- sum(league_table$GS) / Game_Count
GC_LG_Avg <- sum(league_table$GC) / Game_Count
GD_LG_Avg <- sum(league_table$GD) / Game_Count
Wins_Ovr_LG <- (sum(league_table$`Home Wins`) +  sum(league_table$`Away Wins`)) / Game_Count
Draws_Ovr_LG <- (sum(league_table$`Home Draws`) +  sum(league_table$`Away Draws`)) / Game_Count
Losses_Ovr_LG <- (sum(league_table$`Home Losses`) +  sum(league_table$`Away Losses`)) / Game_Count
Wins_Home_LG <- sum(league_table$`Home Wins`) / Game_Count
Wins_Away_LG <- sum(league_table$`Away Wins`) / Game_Count
Draws_Home_LG <- sum(league_table$`Home Draws`) / Game_Count
Draws_Away_LG <- sum(league_table$`Away Draws`) / Game_Count
Losses_Home_LG <- sum(league_table$`Home Losses`) / Game_Count
Losses_Away_LG <- sum(league_table$`Away Losses`) / Game_Count
col_names_home2 = c("POS_H","GS_LG_Avg", "GC_LG_Avg", "GD_LG_Avg", "Wins_Ovr_LG", "Wins_Home_LG","Wins_Away_LG","Draws_Ovr_LG",
"Draws_Home_LG","Draws_Away_LG","Losses_Ovr_LG","Losses_Home_LG","Losses_Away_LG")
col_names_away2 = c("POS_A","GS_LG_Avg", "GC_LG_Avg", "GD_LG_Avg", "Wins_Ovr_LG", "Wins_Home_LG","Wins_Away_LG","Draws_Ovr_LG",
"Draws_Home_LG","Draws_Away_LG","Losses_Ovr_LG","Losses_Home_LG","Losses_Away_LG")
tmp_league_table_values2 <- filter(playing_statistics, Date == date_groups[x+1]) # Select rows from next date group
# Assign values to playing statistics data frame
for(i in 1:nrow(tmp_league_table_values2)){
home_team <- tmp_league_table_values2$HomeTeam[i] # get home team
away_team <- tmp_league_table_values2$AwayTeam[i] # get away team
home_team_values <- league_table[league_table$Team == home_team,] # values for the home team
away_team_values <- league_table[league_table$Team == away_team,] # values for the away team
ind <- match(tmp_league_table_values2$GAME_NUM[i], playing_statistics$GAME_NUM)
playing_statistics[ind, col_names_home2] <- c(home_team_values$POS, GS_LG_Avg, GC_LG_Avg, GD_LG_Avg, Wins_Ovr_LG, Wins_Home_LG,Wins_Away_LG,
Draws_Ovr_LG,Draws_Home_LG,Draws_Away_LG,Losses_Ovr_LG,Losses_Home_LG,Losses_Away_LG)
playing_statistics[ind, col_names_away2] <- c(away_team_values$POS, GS_LG_Avg, GC_LG_Avg, GD_LG_Avg, Wins_Ovr_LG, Wins_Home_LG,Wins_Away_LG,
Draws_Ovr_LG,Draws_Home_LG,Draws_Away_LG,Losses_Ovr_LG,Losses_Home_LG,Losses_Away_LG)
}
}
}
################ Assign Home League Table values ################
for (k in seq(from=1, to=7980, by=380)){
a = k +379
date_groups <- unique(playing_statistics$Date[k:a])
# create empty league table to update
Team <- unique(playing_statistics$HomeTeam[k:a])
TP <- 0
GD <- 0
GS <- 0
GC <- 0
GP <- 0
league_table <- data.frame(Team, TP, GD, GS, GC, GP)
for (x in 1:(length(date_groups)-1)){
tmp_league_table_values <- filter(league_table_values, Date ==date_groups[x])
columnsReqLeague = c("HomeTeam","TP_Home_Table", "TGS_Home_Table", "TGC_Home_Table", "TGD_Home_Table",  "N_Home_Game", "Date")
tmp_league_table_values[columnsReqLeague]
tmp_home <- tmp_league_table_values[c("HomeTeam","TP_Home_Table", "TGS_Home_Table", "TGC_Home_Table", "TGD_Home_Table",  "N_Home_Game", "Date")]
names(tmp_home)[names(tmp_home) == 'HomeTeam'] <- 'Team'
names(tmp_home)[names(tmp_home) == 'TP_Home_Table'] <- 'TP'
names(tmp_home)[names(tmp_home) == 'TGD_Home_Table'] <- 'GD'
names(tmp_home)[names(tmp_home) == 'TGS_Home_Table'] <- 'GS'
names(tmp_home)[names(tmp_home) == 'TGC_Home_Table'] <- 'GC'
names(tmp_home)[names(tmp_home) == 'N_Home_Game'] <- 'GP'
tmp_home <- tmp_home[c("Team","TP","GD", "GS", "GC", "GP")]
for (z in 1:nrow(tmp_home)){
ind <- match(tmp_home$Team[z], league_table$Team)
league_table$TP[ind] <- tmp_home$TP[z]
league_table$GD[ind] <- tmp_home$GD[z]
league_table$GS[ind] <- tmp_home$GS[z]
league_table$GC[ind] <- tmp_home$GC[z]
league_table$GP[ind] <- tmp_home$GP[z]
}
league_table <- league_table[order(-league_table$TP,-league_table$GD,-league_table$GS,-league_table$GC),]
league_table$POS <- c(1:20)
Game_Count <- sum(league_table$GP)
GS_LG_Avg_Home <- sum(league_table$GS) / Game_Count
GC_LG_Avg_Home <- sum(league_table$GS) / Game_Count
col_names_home2 = c("GS_LG_Avg_Home","GC_LG_Avg_Home")
# Now check the next date group and assign position values
tmp_league_table_values2 <- filter(playing_statistics, Date == date_groups[x+1])
for(i in 1:nrow(tmp_league_table_values2)){
# get home team
home_team <- tmp_league_table_values2$HomeTeam[i]
home_team_values <- league_table[league_table$Team == home_team,]
ind <- match(tmp_league_table_values2$GAME_NUM[i], playing_statistics$GAME_NUM)
playing_statistics[ind, col_names_home2] <- c(GS_LG_Avg_Home, GC_LG_Avg_Home)
}
}
}
################ Assign Away League Table values ################
for (k in seq(from=1, to=7980, by=380)){
a = k +379
date_groups <- unique(playing_statistics$Date[k:a])
# create empty league table to update
Team <- unique(playing_statistics$AwayTeam[k:a])
TP <- 0
GD <- 0
GS <- 0
GC <- 0
GP <- 0
league_table <- data.frame(Team, TP, GD, GS, GC, GP)
for (x in 1:(length(date_groups)-1)){
tmp_league_table_values <- filter(league_table_values, Date ==date_groups[x])
columnsReqLeague = c("AwayTeam","TP_Away_Table", "TGS_Away_Table", "TGC_Away_Table", "TGD_Away_Table", "N_Away_Game", "Date")
tmp_league_table_values[columnsReqLeague]
tmp_Away <- tmp_league_table_values[c("AwayTeam","TP_Away_Table", "TGS_Away_Table", "TGC_Away_Table", "TGD_Away_Table", "N_Away_Game", "Date")]
names(tmp_Away)[names(tmp_Away) == 'AwayTeam'] <- 'Team'
names(tmp_Away)[names(tmp_Away) == 'TP_Away_Table'] <- 'TP'
names(tmp_Away)[names(tmp_Away) == 'TGD_Away_Table'] <- 'GD'
names(tmp_Away)[names(tmp_Away) == 'TGS_Away_Table'] <- 'GS'
names(tmp_Away)[names(tmp_Away) == 'TGC_Away_Table'] <- 'GC'
names(tmp_Away)[names(tmp_Away) == 'N_Away_Game'] <- 'GP'
tmp_Away <- tmp_Away[c("Team","TP","GD", "GS", "GC","GP")]
for (z in 1:nrow(tmp_Away)){
ind <- match(tmp_Away$Team[z], league_table$Team)
league_table$TP[ind] <- tmp_Away$TP[z]
league_table$GD[ind] <- tmp_Away$GD[z]
league_table$GS[ind] <- tmp_Away$GS[z]
league_table$GC[ind] <- tmp_Away$GC[z]
league_table$GP[ind] <- tmp_Away$GP[z]
}
league_table <- league_table[order(-league_table$TP,-league_table$GD,-league_table$GS,-league_table$GC),]
league_table$POS <- c(1:20)
Game_Count <- sum(league_table$GP)
GS_LG_Avg_Away <- sum(league_table$GS) / Game_Count
GC_LG_Avg_Away <- sum(league_table$GC) / Game_Count
col_names_Away2 <- c("GS_LG_Avg_Away","GC_LG_Avg_Away")
# Now check the next date group and assign position values
tmp_league_table_values2 <- filter(playing_statistics, Date == date_groups[x+1])
for(i in 1:nrow(tmp_league_table_values2)){
# get Away team
Away_team <- tmp_league_table_values2$AwayTeam[i]
Away_team_values <- league_table[league_table$Team == Away_team,]
ind <- match(tmp_league_table_values2$GAME_NUM[i], playing_statistics$GAME_NUM)
playing_statistics[ind, col_names_Away2] <- c(GS_LG_Avg_Away, GC_LG_Avg_Away)
}
}
}
################ Assign form against a particular team and general form ################
for (k in 1:7980){
home_team <- playing_statistics$HomeTeam[k]
away_team <- playing_statistics$AwayTeam[k]
# identical fixture last 5
same_fixtures <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == home_team & playing_statistics$AwayTeam == away_team)])[1:5]
# all fixtures matching teams last 5
all_fixtures <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & ((playing_statistics$HomeTeam == home_team & playing_statistics$AwayTeam == away_team) | (playing_statistics$HomeTeam == away_team & playing_statistics$AwayTeam == home_team))])[1:5]
all_fixtures_table <- playing_statistics[all_fixtures,c("HomeTeam","AwayTeam","AD","HD")]
#Form against specific opponent
fixture_home_form <- sum(all_fixtures_table$HD[all_fixtures_table$HomeTeam == home_team],all_fixtures_table$AD[all_fixtures_table$AwayTeam == home_team])/nrow(all_fixtures_table)
fixture_away_form <- fixture_home_form*-1
playing_statistics$FRM_VO_H[k] <- ifelse(is.na(fixture_home_form),0,fixture_home_form)
playing_statistics$FRM_VO_A[k] <- ifelse(is.na(fixture_away_form),0,fixture_away_form)
#last five games for home team regardless of opposition
all_fixtures_home_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == home_team | playing_statistics$AwayTeam == home_team)])[1:5]
#last five home games for home team regardless of opposition
home_fixtures_home_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == home_team)])[1:5]
#last five games for away team regardless of opposition
all_fixtures_away_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$HomeTeam == away_team | playing_statistics$AwayTeam == away_team)])[1:5]
#last five away games for away team regardless of opposition
away_fixtures_away_team <- rev(playing_statistics$GAME_NUM[playing_statistics$GAME_NUM < k & (playing_statistics$AwayTeam == away_team)])[1:5]
ovr_form_home <- playing_statistics[all_fixtures_home_team,c("HomeTeam","AwayTeam","AD","HD")] # home team form overall
ovr_form_away <- playing_statistics[all_fixtures_away_team,c("HomeTeam","AwayTeam","AD","HD")] # away team form overall
home_form_home <- playing_statistics[home_fixtures_home_team,c("HomeTeam","AwayTeam","AD","HD")] # home team form overall
away_form_away <- playing_statistics[away_fixtures_away_team,c("HomeTeam","AwayTeam","AD","HD")] # away team form overall
#Form in last five games for home team regardless of opposition
ovr_form_home_val <-sum(c(ovr_form_home$HD[which(ovr_form_home$HomeTeam==home_team)], ovr_form_home$AD[which(ovr_form_home$AwayTeam==home_team)]))/nrow(ovr_form_home)
#Form in last five games for away team regardless of opposition
ovr_form_away_val <-sum(c(ovr_form_away$HD[which(ovr_form_away$HomeTeam==away_team)], ovr_form_away$AD[which(ovr_form_away$AwayTeam==away_team)]))/nrow(ovr_form_away)
#Form in last five home games for home team regardless of opposition
home_form_val <-sum(c(home_form_home$HD[which(home_form_home$HomeTeam==home_team)], home_form_home$AD[which(home_form_home$AwayTeam==home_team)]))/nrow(home_form_home)
#Form in last five away games for away team regardless of opposition
away_form_val <-sum(c(away_form_away$HD[which(away_form_away$HomeTeam==away_team)], away_form_away$AD[which(away_form_away$AwayTeam==away_team)]))/nrow(away_form_away)
playing_statistics$OFRM_H[k] <- ovr_form_home_val
playing_statistics$OFRM_A[k] <- ovr_form_away_val
playing_statistics$HFRM_H[k] <- home_form_val
playing_statistics$AFRM_A[k] <- away_form_val
}
########### new values ################
playing_statistics$PD_H <- playing_statistics$TP_H - playing_statistics$TP_A # points difference home team
playing_statistics$PD_A <- playing_statistics$TP_A - playing_statistics$TP_H # points difference away team
playing_statistics$POSD_H <- playing_statistics$POS_H - playing_statistics$POS_A # place difference home team
playing_statistics$POSD_A <- -playing_statistics$POSD_H # place difference away team
playing_statistics$P90_Ovr_H <- playing_statistics$TP_H / playing_statistics$GW_H # points per 90 overall home team
playing_statistics$P90_Ovr_A <- playing_statistics$TP_A / playing_statistics$GW_A # points per 90 overall away team
playing_statistics$P90_home_H <- playing_statistics$TP_H / playing_statistics$N_Home_Game # points per 90 in home games for home team
playing_statistics$P90_away_A <- playing_statistics$TP_A / playing_statistics$N_Away_Game # points per 90 in away games for away team
playing_statistics$GS90_Over_H <- playing_statistics$TGS_H / playing_statistics$GW_H # goals scored per 90 home team
playing_statistics$GS90_Over_A <- playing_statistics$TGS_A / playing_statistics$GW_A # goals scored per 90 away team
playing_statistics$GS90_Home <- playing_statistics$TGS_Home_Table / playing_statistics$N_Home_Game # goals scored per 90 at home home team
playing_statistics$GS90_Away <- playing_statistics$TGS_Away_Table / playing_statistics$N_Away_Game # goals scored per 90 away, away team
playing_statistics$GC90_Over_H <- playing_statistics$TGC_H / playing_statistics$GW_H # goals conceded per 90 home team
playing_statistics$GC90_Over_A <- playing_statistics$TGC_A / playing_statistics$GW_A # goals conceded per 90 away team
playing_statistics$GC90_Home <- playing_statistics$TGC_Home_Table / playing_statistics$N_Home_Game # goals conceded per 90 at home, home team
playing_statistics$GC90_Away <- playing_statistics$TGC_Away_Table / playing_statistics$N_Away_Game # goals conceded per 90 away, away team
# ATT & DEF power ratings, used for XG check the website for calculation
# Home team
playing_statistics$ATT_H_ovr <- playing_statistics$GS90_Over_H / playing_statistics$GS_LG_Avg # overall
playing_statistics$DEF_H_ovr <- playing_statistics$GC90_Over_H / playing_statistics$GC_LG_Avg # overall
playing_statistics$ATT_H <- playing_statistics$GS90_Home / playing_statistics$GS_LG_Avg_Home # home
playing_statistics$DEF_H <- playing_statistics$GC90_Home / playing_statistics$GC_LG_Avg_Home # home
# Away
playing_statistics$ATT_A_ovr <- playing_statistics$GC90_Over_A / playing_statistics$GS_LG_Avg # overall
playing_statistics$DEF_A_ovr <- playing_statistics$GC90_Over_A / playing_statistics$GC_LG_Avg # overall
playing_statistics$ATT_A <- playing_statistics$GS90_Away / playing_statistics$GS_LG_Avg_Away # away
playing_statistics$DEF_A <- playing_statistics$GC90_Away / playing_statistics$GC_LG_Avg_Away # away
# XG and XCG
# Home
playing_statistics$XG_OVR_H <- playing_statistics$GS_LG_Avg * playing_statistics$ATT_H_ovr * playing_statistics$DEF_A_ovr # overall
playing_statistics$XGC_OVR_H <- playing_statistics$GC_LG_Avg * playing_statistics$ATT_A_ovr * playing_statistics$DEF_H_ovr # overall
playing_statistics$XG_H <- playing_statistics$GS_LG_Avg_Home * playing_statistics$ATT_H * playing_statistics$DEF_A # Home def_a
playing_statistics$XGC_H <- playing_statistics$GC_LG_Avg_Home * playing_statistics$ATT_A * playing_statistics$DEF_H # Home Att_a
# Away
playing_statistics$XG_OVR_A <- playing_statistics$GS_LG_Avg * playing_statistics$ATT_A_ovr * playing_statistics$DEF_H_ovr # overall
playing_statistics$XGC_OVR_A <- playing_statistics$GC_LG_Avg * playing_statistics$ATT_H_ovr * playing_statistics$DEF_A_ovr # overall
playing_statistics$XG_A <- playing_statistics$GS_LG_Avg_Away * playing_statistics$ATT_A * playing_statistics$DEF_H # away
playing_statistics$XGC_A <- playing_statistics$GC_LG_Avg_Away * playing_statistics$ATT_H * playing_statistics$DEF_A # away
playing_statistics$ELO_H <- 1000 # Home ELO
playing_statistics$ELO_A <- 1000 # Away ELO
playing_statistics$HOR_H <- 1000 # home off rating
playing_statistics$AOR_A <- 1000 # away off rating
playing_statistics$HDR_H <- 1000 # home def rating
playing_statistics$ADR_A <- 1000 # away def rating
playing_statistics[playing_statistics == 'Inf'] <- 0
playing_statistics[is.na(playing_statistics)] <- 0
cols_xGNS_ovr_H <- c("FTHG","P90_Ovr_H","POSD_H","PD_H","HC","HF","OFRM_H")#,"HO","HBP","FRM_VO_H") # feature selection column names
cols_xGNS_ovr_A <- c("FTAG","P90_Ovr_A","POSD_A","PD_A","AC","AF","OFRM_A")#,"AO","ABP","FRM_VO_A") # feature selection column names
cols_xGNS_H <- c("FTHG","P90_home_H","HC","HF","HFRM_H")#,"HO","HBP","FRM_VO_H") # feature selection column names
cols_xGNS_A <- c("FTAG","P90_away_A","AC","AF","AFRM_A")#,"AO","ABP","FRM_VO_A") # feature selection column names
######
important_cols <- unique(c(cols_xGNS_ovr_H,cols_xGNS_ovr_A,cols_xGNS_H,cols_xGNS_A,"SZN"))
summarised_table <- playing_statistics[,important_cols]
for (season_n in 2001:2021){
season_games <- summarised_table[which(summarised_table$SZN==season_n),]
indexes <- which(summarised_table$SZN==season_n)
summarised_table$P90_Ovr_H[indexes] <- ((season_games$P90_Ovr_H-mean(season_games$P90_Ovr_H))/sd(season_games$P90_Ovr_H))
summarised_table$POSD_H[indexes] <- ((season_games$POSD_H-mean(season_games$POSD_H))/sd(season_games$POSD_H))
summarised_table$PD_H[indexes] <- ((season_games$PD_H-mean(season_games$PD_H))/sd(season_games$PD_H))
summarised_table$HC[indexes] <- ((season_games$HC-mean(season_games$HC))/sd(season_games$HC))
summarised_table$HF[indexes] <- ((season_games$HF-mean(season_games$HF))/sd(season_games$HF))
summarised_table$OFRM_H[indexes] <- ((season_games$OFRM_H-mean(season_games$OFRM_H))/sd(season_games$OFRM_H))
# summarised_table$FRM_VO_H[indexes] <- ((season_games$FRM_VO_H-mean(season_games$FRM_VO_H))/sd(season_games$FRM_VO_H))
summarised_table$P90_Ovr_A[indexes] <- ((season_games$P90_Ovr_A-mean(season_games$P90_Ovr_A))/sd(season_games$P90_Ovr_A))
summarised_table$POSD_A[indexes] <- ((season_games$POSD_A-mean(season_games$POSD_A))/sd(season_games$POSD_A))
summarised_table$PD_A[indexes] <- ((season_games$PD_A-mean(season_games$PD_A))/sd(season_games$PD_A))
summarised_table$AC[indexes] <- ((season_games$AC-mean(season_games$AC))/sd(season_games$AC))
summarised_table$AF[indexes] <- ((season_games$AF-mean(season_games$AF))/sd(season_games$AF))
#summarised_table$FRM_VO_A[indexes] <- ((season_games$FRM_VO_A-mean(season_games$FRM_VO_A))/sd(season_games$FRM_VO_A))
}
########Min-max scaling########
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
summarised_table$P90_Ovr_A<- normalize(summarised_table$P90_Ovr_A)
summarised_table$POSD_A<- normalize(summarised_table$POSD_A)
summarised_table$PD_A<-normalize(summarised_table$PD_A)
summarised_table$AC<- normalize(summarised_table$AC)
summarised_table$AF<-normalize(summarised_table$AF)
#summarised_table$FRM_VO_A<- normalize(summarised_table$FRM_VO_A)
summarised_table$OFRM_A <- normalize(summarised_table$OFRM_A)
summarised_table$P90_Ovr_H<- normalize(summarised_table$P90_Ovr_H)
summarised_table$POSD_H<- normalize(summarised_table$POSD_H)
summarised_table$PD_H<-normalize(summarised_table$PD_H)
summarised_table$HC<- normalize(summarised_table$HC)
summarised_table$HF<-normalize(summarised_table$HF)
summarised_table$OFRM_H <- normalize(summarised_table$OFRM_H)
#summarised_table$FRM_VO_H <- normalize(summarised_table$FRM_VO_H)
#############
xGNS_ovr_H_features <- summarised_table[cols_xGNS_ovr_H]
xGNS_ovr_A_features <- summarised_table[cols_xGNS_ovr_A]
xGNS_H_features <- summarised_table[cols_xGNS_H]
xGNS_A_features <- summarised_table[cols_xGNS_A]
#######
write.csv(xGNS_ovr_H_features,xGNS_ovr_H_features_file, row.names = FALSE)
write.csv(xGNS_ovr_A_features,xGNS_ovr_A_features_file, row.names = FALSE)
write.csv(xGNS_H_features,xGNS_H_features_file, row.names = FALSE)
write.csv(xGNS_A_features,xGNS_A_features_file, row.names = FALSE)
################ Pre processing functions ######################
# if user input == nn run this etc
source("nn_xGNS.R")
predict_xGNS_ovr_H <- nn_xGNS(FTHG~., xGNS_ovr_H_features, "H")
predict_xGNS_H <- nn_xGNS(FTHG~., xGNS_H_features, "H")
predict_xGNS_ovr_A <- nn_xGNS(FTAG~., xGNS_ovr_A_features, "A")
source("nn_xGNS.R")
source("neural_network.R")
install.packages("neuralnet")
runK <- function(){print("Running K")}
runN <- function(){neural_network()}
runR <- function(){print("Running R")}
repeat{
print("Enter 'K' to run KNN")
print("Enter 'N'to run Neural Network")
print("Enter 'R' to run Random Forest")
print("Enter 'Q' to quit")
result = switch(
readline(),
"K"= runK(),
"N"= runN(),
"R"= runR(),
"Q"= break
)
}
source("neural_network.R")
runK <- function(){print("Running K")}
runN <- function(){neural_network()}
runR <- function(){print("Running R")}
repeat{
print("Enter 'K' to run KNN")
print("Enter 'N'to run Neural Network")
print("Enter 'R' to run Random Forest")
print("Enter 'Q' to quit")
result = switch(
readline(),
"K"= runK(),
"N"= runN(),
"R"= runR(),
"Q"= break
)
}
##### Packages #####
install.packages("dplyr")
install.packages("plyr")
install.packages("neuralnet")
install.packages("caret")
library(plyr)
library(dplyr)
library(neuralnet)
library(caret)
neural_network <- function() {
##### Set Seed #####
# Seed is set so that the results can be reproduced for marking
set.seed(1773894103)
##### Load Files #####
source_dir <- paste(getwd(),"class_feature",sep = "/") # path location of files
# read in CSV data
data <- read.csv(file=source_dir)
unseen_cut = length(data$FTR)-379
unseen_data <- data[unseen_cut:length(data$FTR),]
data <- data[1:unseen_cut,]
##### Neural Network Model Fitting #####
#cv.error <- NULL
#k <- 10
#maxs <- apply(data, 2, max)
#mins <- apply(data, 2, min)
#scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
#pbar <- create_progress_bar('text')
#pbar$init(k)
#for(i in 1:k){
#  index <- sample(1:nrow(data),round(0.9*nrow(data)))
#  train.cv <- scaled[index,]
#  test.cv <- scaled[-index,]
#  nn <- neuralnet(FTR~.,data=train.cv,hidden=1,stepmax=1e7,act.fct = "logistic",linear.output=TRUE)
#  pr.nn <- compute(nn,test.cv[,1:3])
#  pr.nn <- pr.nn$net.result*(max(data$FTR)-min(data$FTR))+min(data$FTR)
#  test.cv.r <- (test.cv$FTR)*(max(data$FTR)-min(data$FTR))+min(data$FTR)
#  cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#  pbar$step()
#}
#### Neural Network Model no fitting ####
nn = neuralnet(FTR~.,
data=data,
hidden=1,
stepmax=1e7,
act.fct = "logistic",
linear.output = TRUE
)
##### Measuring Model #####
plot(nn)
Predict=neuralnet::compute(nn,unseen_data)
overall <- data.frame(Predict$net.result, unseen_data$FTR)
overall$Predict.net.result <- overall$Predict.net.result*3
overall$True_Value <- ifelse(round(overall$Predict.net.result, digits=0) >= 2, 3,
ifelse(round(overall$Predict.net.result, digits=0) < 2 &&
round(overall$Predict.net.result, digits=0) > 0.5, 1,
ifelse(round(overall$Predict.net.result, digits=0) < 0.5, 0, FALSE)))
overall$Winner <- ifelse(overall$True_Value == unseen_data$FTR, TRUE, FALSE)
print((sum(overall$Winner == TRUE)/length(unseen_data$FTR))*100)
matrix <- confusionMatrix(factor(overall$True_Value, levels=c("0", "1", "3")),
as.factor(unseen_data$FTR))
rmse = RMSE(overall$True_Value, unseen_data$FTR)
mae = MAE(overall$True_Value, unseen_data$FTR)
print(rmse)
print(mae)
print(matrix)
}
