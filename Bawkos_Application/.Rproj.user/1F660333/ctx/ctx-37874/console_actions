{
    "type": [
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "  print(\"Enter 'N'to run Neural Network\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'R' to run Random Forest\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'Q' to quit\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  result = switch(  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    readline(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"K\"= runK(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"N\"= runN(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"R\"= runR(), ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"Q\"= break",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  )",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "N",
        "[1] 39.73684\n[1] 2.078081\n[1] 1.586842\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1   3\n         0   0   0   0\n         1   0   0   0\n         3 145  84 151\n\nOverall Statistics\n                                          \n               Accuracy : 0.3974          \n                 95% CI : (0.3478, 0.4485)\n    No Information Rate : 0.3974          \n    P-Value [Acc > NIR] : 0.5195          \n                                          \n                  Kappa : 0               \n                         ",
        "                 \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: 0 Class: 1 Class: 3\nSensitivity            0.0000   0.0000   1.0000\nSpecificity            1.0000   1.0000   0.0000\nPos Pred Value            NaN      NaN   0.3974\nNeg Pred Value         0.6184   0.7789      NaN\nPrevalence             0.3816   0.2211   0.3974\nDetection Rate         0.0000   0.0000   0.3974\nDetection Prevalence   0.0000   0.0000   1.0000\nBalanced Accuracy      0.5000   0.5000   0.5000",
        "\n[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "N",
        "[1] 39.73684\n[1] 2.078081\n[1] 1.586842\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1   3\n         0   0   0   0\n         1   0   0   0\n         3 145  84 151\n\nOverall Statistics\n                                          \n               Accuracy : 0.3974          \n                 95% CI : (0.3478, 0.4485)\n    No Information Rate : 0.3974          \n    P-Value [Acc > NIR] : 0.5195          \n                                          \n                  Kappa : 0               \n                         ",
        "                 \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: 0 Class: 1 Class: 3\nSensitivity            0.0000   0.0000   1.0000\nSpecificity            1.0000   1.0000   0.0000\nPos Pred Value            NaN      NaN   0.3974\nNeg Pred Value         0.6184   0.7789      NaN\nPrevalence             0.3816   0.2211   0.3974\nDetection Rate         0.0000   0.0000   0.3974\nDetection Prevalence   0.0000   0.0000   1.0000\nBalanced Accuracy      0.5000   0.5000   0.5000",
        "\n[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "repeat{",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"\\nTestn\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'K' to run KNN\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'N'to run Neural Network\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'R' to run Random Forest\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'Q' to quit\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  result = switch(  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    readline(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"K\"= runK(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"N\"= runN(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"R\"= runR(), ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"Q\"= break",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  )",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "repeat{",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'K' to run KNN\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'N'to run Neural Network\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'R' to run Random Forest\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'Q' to quit\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  result = switch(  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    readline(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"K\"= runK(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"N\"= runN(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"R\"= runR(), ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"Q\"= break",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  )",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "class_rf<-function(){",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # ************************************************",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # NPREPROCESSING_splitdataset() :",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # Randomise and split entire data set",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # INPUT: data Frame - class_dataset - dataset",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # OUTPUT : data Frame - testing_data - dataset",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #          data Frame - training_data - dataset",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #          List - retList",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # ************************************************",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  NPREPROCESSING_splitdataset<-function(class_dataset){",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    # **** Create a Training dataset using 80% of the records",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    # and use the other 20% to act as unseen testing data ***",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    class_dataset<-class_dataset[order(runif(nrow(class_dataset))),]",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    training_records<-round(nrow(class_dataset)*(80/100))",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    train <- 1:training_records",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    test <- -train",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    training_data <- class_dataset[train,]",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    testing_data = class_dataset[test,]",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    retList<-list(\"train\"=training_data,",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "                  \"test\"=testing_data)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    return(retList)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  }",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # ****************************************************",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # classRandomForest() :",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # Train and test a Random Forest classification model",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # INPUT: data Frame - train - training dataset",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #        data Frame - test - testing dataset",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  #",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # OUTPUT : data Frame - p1 - prediction of unseen data",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  # ****************************************************",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  classRandomForest<-function(train, test, plot=TRUE){",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    set.seed(15)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    train_ctrl <- trainControl(method = \"cv\", number = 5, savePredictions=TRUE)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    rf_class<-randomForest::randomForest(FTR~., data=train, mtry=2, ntree=501)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    print(rf_class)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    p1<-predict(rf_class, test)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    plot(p1)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    tab1<-table(Predicted = p1, Actual = test$FTR)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    print(tab1)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    return(p1)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  }",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(randomForest)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(stats)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(party)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(dplyr)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(ggraph)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(igraph)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(tidyverse) ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(caret)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(plyr)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(reshape2)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(ModelMetrics)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(recipes)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(foreach)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(pROC)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  library(e1071)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  class_data<-paste(getwd(),\"class_feature.csv\",sep = \"/\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  class_dataset<-read.csv(file = class_data)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  class_dataset$FTR<-as.factor(class_dataset$FTR)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  class_matches<-NPREPROCESSING_splitdataset(class_dataset)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  class_dataset_train<-class_matches[[1]]",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  class_dataset_test<-class_matches[[2]]",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  class_result<-classRandomForest(train=class_dataset_train, test = class_dataset_test)",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"class dataset completed\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"--------------------------------------------\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "class_rf()",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'R' to run Random Forest\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "Q",
        "> ",
        "class_rf<-function(){",
        "+ ",
        "  ",
        "+ ",
        "  # ************************************************",
        "+ ",
        "  # NPREPROCESSING_splitdataset() :",
        "+ ",
        "  #",
        "+ ",
        "  # Randomise and split entire data set",
        "+ ",
        "  #",
        "+ ",
        "  # INPUT: data Frame - class_dataset - dataset",
        "+ ",
        "  #",
        "+ ",
        "  # OUTPUT : data Frame - testing_data - dataset",
        "+ ",
        "  #          data Frame - training_data - dataset",
        "+ ",
        "  #          List - retList",
        "+ ",
        "  # ************************************************",
        "+ ",
        "  ",
        "+ ",
        "  NPREPROCESSING_splitdataset<-function(class_dataset){",
        "+ ",
        "    ",
        "+ ",
        "    # **** Create a Training dataset using 80% of the records",
        "+ ",
        "    # and use the other 20% to act as unseen testing data ***",
        "+ ",
        "    ",
        "+ ",
        "    class_dataset<-class_dataset[order(runif(nrow(class_dataset))),]",
        "+ ",
        "    training_records<-round(nrow(class_dataset)*(80/100))",
        "+ ",
        "    ",
        "+ ",
        "    train <- 1:training_records",
        "+ ",
        "    test <- -train",
        "+ ",
        "    ",
        "+ ",
        "    training_data <- class_dataset[train,]",
        "+ ",
        "    testing_data = class_dataset[test,]",
        "+ ",
        "    ",
        "+ ",
        "    retList<-list(\"train\"=training_data,",
        "+ ",
        "                  \"test\"=testing_data)",
        "+ ",
        "    return(retList)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # ****************************************************",
        "+ ",
        "  # classRandomForest() :",
        "+ ",
        "  #",
        "+ ",
        "  # Train and test a Random Forest classification model",
        "+ ",
        "  #",
        "+ ",
        "  # INPUT: data Frame - train - training dataset",
        "+ ",
        "  #        data Frame - test - testing dataset",
        "+ ",
        "  #",
        "+ ",
        "  # OUTPUT : data Frame - p1 - prediction of unseen data",
        "+ ",
        "  # ****************************************************",
        "+ ",
        "  ",
        "+ ",
        "  classRandomForest<-function(train, test, plot=TRUE){",
        "+ ",
        "    ",
        "+ ",
        "    set.seed(15)",
        "+ ",
        "    train_ctrl <- trainControl(method = \"cv\", number = 5, savePredictions=TRUE)",
        "+ ",
        "    rf_class<-randomForest::randomForest(FTR~., data=train, mtry=2, ntree=501)",
        "+ ",
        "    print(rf_class)",
        "+ ",
        "    ",
        "+ ",
        "    p1<-predict(rf_class, test)",
        "+ ",
        "    ",
        "+ ",
        "    plot(p1)",
        "+ ",
        "    tab1<-table(Predicted = p1, Actual = test$FTR)",
        "+ ",
        "    ",
        "+ ",
        "    print(tab1)",
        "+ ",
        "  ",
        "+ ",
        "    return(p1)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  library(randomForest)",
        "+ ",
        "  library(stats)",
        "+ ",
        "  library(party)",
        "+ ",
        "  library(dplyr)",
        "+ ",
        "  library(ggraph)",
        "+ ",
        "  library(igraph)",
        "+ ",
        "  library(tidyverse) ",
        "+ ",
        "  library(caret)",
        "+ ",
        "  library(plyr)",
        "+ ",
        "  library(reshape2)",
        "+ ",
        "  library(ModelMetrics)",
        "+ ",
        "  library(recipes)",
        "+ ",
        "  library(foreach)",
        "+ ",
        "  library(pROC)",
        "+ ",
        "  library(e1071)",
        "+ ",
        "  ",
        "+ ",
        "  class_data<-paste(getwd(),\"class_feature.csv\",sep = \"/\")",
        "+ ",
        "  ",
        "+ ",
        "  class_dataset<-read.csv(file = class_data)",
        "+ ",
        "  ",
        "+ ",
        "  class_dataset$FTR<-as.factor(class_dataset$FTR)",
        "+ ",
        "  ",
        "+ ",
        "  class_matches<-NPREPROCESSING_splitdataset(class_dataset)",
        "+ ",
        "  ",
        "+ ",
        "  class_dataset_train<-class_matches[[1]]",
        "+ ",
        "  class_dataset_test<-class_matches[[2]]",
        "+ ",
        "  ",
        "+ ",
        "  class_result<-classRandomForest(train=class_dataset_train, test = class_dataset_test)",
        "+ ",
        "  print(\"class dataset completed\")",
        "+ ",
        "  print(\"--------------------------------------------\")",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "class_rf()",
        "randomForest 4.6-14\n",
        "Type rfNews() to see new features/changes/bug fixes.\n",
        "\nAttaching package: ‘randomForest’\n\n",
        "The following object is masked from ‘package:ggplot2’:\n\n    margin\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    combine\n\n",
        "Loading required package: grid\n",
        "Loading required package: mvtnorm\n",
        "Loading required package: modeltools\n",
        "Loading required package: stats4\n",
        "\nAttaching package: ‘modeltools’\n\n",
        "The following object is masked from ‘package:plyr’:\n\n    empty\n\n",
        "Loading required package: strucchange\n",
        "Loading required package: zoo\n",
        "\nAttaching package: ‘zoo’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\n",
        "Loading required package: sandwich\n",
        "\nAttaching package: ‘igraph’\n\n",
        "The following object is masked _by_ ‘.GlobalEnv’:\n\n    normalize\n\n",
        "The following object is masked from ‘package:modeltools’:\n\n    clusters\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    as_data_frame, groups, union\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    decompose, spectrum\n\n",
        "The following object is masked from ‘package:base’:\n\n    union\n\n",
        "\u001B[37m-- \u001B[1mAttaching packages\u001B[22m ------------------------------------------------------------------------------------------------------------------------------------------------------------------ tidyverse 1.3.1 --\u001B[39m\n",
        "\u001B[37m\u001B[32mv\u001B[37m \u001B[34mtibble \u001B[37m 3.1.6     \u001B[32mv\u001B[37m \u001B[34mpurrr  \u001B[37m 0.3.4\n\u001B[32mv\u001B[37m \u001B[34mtidyr  \u001B[37m 1.1.4     \u001B[32mv\u001B[37m \u001B[34mstringr\u001B[37m 1.4.0\n\u001B[32mv\u001B[37m \u001B[34mreadr  \u001B[37m 2.1.0     \u001B[32mv\u001B[37m \u001B[34mforcats\u001B[37m 0.5.1\u001B[39m\n",
        "\u001B[37m-- \u001B[1mConflicts\u001B[22m --------------------------------------------------------------------------------------------------------------------------------------------------------------------- tidyverse_conflicts() --\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32marrange()\u001B[37m        masks \u001B[34mplyr\u001B[37m::arrange()\n\u001B[31mx\u001B[37m \u001B[34mtibble\u001B[37m::\u001B[32mas_data_frame()\u001B[37m masks \u001B[34migraph\u001B[37m::as_data_frame(), \u001B[34mdplyr\u001B[37m::as_data_frame()\n\u001B[31mx\u001B[37m \u001B[34mstringr\u001B[37m::\u001B[32mboundary()\u001B[37m     masks \u001B[34mstrucchange\u001B[37m::boundary()\n\u001B[31mx\u001B[37m \u001B[34mrandomForest\u001B[37m::\u001B[32mcombine()\u001B[37m masks \u001B[34mdplyr\u001B[37m::combine()\n\u001B[31mx\u001B[37m \u001B[34mpurrr\u001B[37m::\u001B[32mcompact()\u001B[37m        masks \u001B[34mplyr\u001B[37m::compact()\n\u001B[31mx\u001B[37m \u001B[34mpurrr\u001B[37m::\u001B[32mcompose()\u001B[37m        masks \u001B[34migraph\u001B[37m::compose()\n\u001B[31mx\u001B[37m \u001B[34mneuralnet\u001B[37m::\u001B[32mcompute()\u001B[37m    masks \u001B[34mdplyr\u001B[37m::compute()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mcount()\u001B[37m          masks \u001B[34mplyr\u001B[37m::count()\n\u001B[31mx\u001B[37m \u001B[34mtidyr\u001B[37m::\u001B[32mcrossing()\u001B[37m       masks \u001B[34migraph\u001B[37m::crossing()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mfailwith()\u001B[37m       masks \u001B[34mplyr\u001B[37m::failwith()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mfilter()\u001B[37m         masks \u001B[34mstats\u001B[37m::filter()\n\u001B[31mx\u001B[37m \u001B[34migraph\u001B[37m::\u001B[32mgroups()\u001B[37m        masks \u001B[34mdplyr\u001B[37m::groups()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mid()\u001B[37m             masks \u001B[34mplyr\u001B[37m::id()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mlag()\u001B[37m            masks \u001B[34mstats\u001B[37m::lag()\n\u001B[31mx\u001B[37m \u001B[34mpurrr\u001B[37m::\u001B[32mlift()\u001B[37m           masks \u001B[34mcaret\u001B[37m::lift()\n\u001B[31mx\u001B[37m \u001B[34mrandomForest\u001B[37m::\u001B[32mmargin()\u001B[37m  masks \u001B[34mggplot2\u001B[37m::margin()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mmutate()\u001B[37m         masks \u001B[34mplyr\u001B[37m::mutate()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mrename()\u001B[37m         masks \u001B[34mplyr\u001B[37m::rename()\n\u001B[31mx\u001B[37m \u001B[34mpurrr\u001B[37m::\u001B[32msimplify()\u001B[37m       masks \u001B[34migraph\u001B[37m::simplify()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32msummarise()\u001B[37m      masks \u001B[34mplyr\u001B[37m::summarise()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32msummarize()\u001B[37m      masks \u001B[34mplyr\u001B[37m::summarize()\u001B[39m\n",
        "\nAttaching package: ‘reshape2’\n\n",
        "The following object is masked from ‘package:tidyr’:\n\n    smiths\n\n",
        "\nAttaching package: ‘ModelMetrics’\n\n",
        "The following objects are masked from ‘package:caret’:\n\n    confusionMatrix, precision, recall, sensitivity, specificity\n\n",
        "The following object is masked from ‘package:base’:\n\n    kappa\n\n",
        "\nAttaching package: ‘recipes’\n\n",
        "The following object is masked from ‘package:stringr’:\n\n    fixed\n\n",
        "The following object is masked from ‘package:stats4’:\n\n    update\n\n",
        "The following object is masked from ‘package:stats’:\n\n    step\n\n",
        "\nAttaching package: ‘foreach’\n\n",
        "The following objects are masked from ‘package:purrr’:\n\n    accumulate, when\n\n",
        "Type 'citation(\"pROC\")' for a citation.\n",
        "\nAttaching package: ‘pROC’\n\n",
        "The following object is masked from ‘package:ModelMetrics’:\n\n    auc\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    cov, smooth, var\n\n",
        "\nCall:\n randomForest(formula = FTR ~ ., data = train, mtry = 2, ntree = 501) \n               Type of random forest: classification\n                     Number of trees: 501\nNo. of variables tried at each split: 2\n\n        OOB estimate of  error rate: 13.19%\nConfusion matrix:\n     0   1    3 class.error\n0 1284 116   93  0.13998660\n1  128 983  200  0.25019069\n3   53 104 2302  0.06384709\n         Actual\nPredicted   0   1   3\n        0 354  33  12\n        1  34 224  28\n        3  32  34 565\n[1] \"class dataset completed\"",
        "\n[1] \"--------------------------------------------\"\n",
        "> ",
        "help <- function(){",
        "+ ",
        "  print(\"Enter 'K' to run KNN\")",
        "+ ",
        "  print(\"Enter 'N'to run Neural Network\")",
        "+ ",
        "  print(\"Enter 'CR' to run Random Forest: Classification\")",
        "+ ",
        "  print(\"Enter 'Q' to quit\")",
        "+ ",
        "}",
        "> ",
        "runCR <- function(){class_rf()}",
        "> ",
        "",
        "> ",
        "help <- function(){",
        "+ ",
        "  print(\"Enter 'K' to run KNN\")",
        "+ ",
        "  print(\"Enter 'N'to run Neural Network\")",
        "+ ",
        "  print(\"Enter 'CR' to run Random Forest: Classification\")",
        "+ ",
        "  print(\"Enter 'Q' to quit\")",
        "+ ",
        "}",
        "> ",
        "help()",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "> ",
        "input <- readline()",
        "",
        "while(input!=\"Q\"){",
        "> ",
        "  result = switch(  ",
        "+ ",
        "    input,  ",
        "+ ",
        "    \"K\"= runK(),  ",
        "+ ",
        "    \"N\"= runN(),",
        "+ ",
        "    \"CR\"= runCR(),",
        "+ ",
        "    \"PP\"= runCR(), ",
        "+ ",
        "    \"Q\"= break",
        "+ ",
        "  )",
        "> ",
        "  help()",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "> ",
        "  ",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "runCR <- function(){class_rf()}",
        "> ",
        "",
        "> ",
        "help <- function(){",
        "+ ",
        "  print(\"Enter 'K' to run KNN\")",
        "+ ",
        "  print(\"Enter 'N'to run Neural Network\")",
        "+ ",
        "  print(\"Enter 'CR' to run Random Forest: Classification\")",
        "+ ",
        "  print(\"Enter 'Q' to quit\")",
        "+ ",
        "}",
        "> ",
        "help()",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "> ",
        "input <- readline()",
        "",
        "while(input!=\"Q\"){",
        "> ",
        "  result = switch(  ",
        "+ ",
        "    input,  ",
        "+ ",
        "    \"K\"= runK(),  ",
        "+ ",
        "    \"N\"= runN(),",
        "+ ",
        "    \"CR\"= runCR(),",
        "+ ",
        "    \"PP\"= runCR(), ",
        "+ ",
        "    \"Q\"= break",
        "+ ",
        "  )",
        "> ",
        "  help()",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "s",
        "Error: object 's' not found\n",
        "> ",
        "input <- ",
        "+ ",
        "while(readline()!=\"Q\"){",
        "+ ",
        "  result = switch(  ",
        "+ ",
        "    input,  ",
        "+ ",
        "    \"K\"= runK(),  ",
        "+ ",
        "    \"N\"= runN(),",
        "+ ",
        "    \"CR\"= runCR(),",
        "+ ",
        "    \"PP\"= runCR(), ",
        "+ ",
        "    \"Q\"= break",
        "+ ",
        "  )",
        "+ ",
        "  help()",
        "+ ",
        "}",
        "",
        "while(readline()!=\"Q\"){",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  result = switch(  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    input,  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"K\"= runK(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"N\"= runN(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"CR\"= runCR(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"PP\"= runCR(), ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"Q\"= break",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  )",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  help()",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "CR",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "CR",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "K",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "runCR <- function(){class_rf()}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "repeat{",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'K' to run KNN\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'N'to run Neural Network\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'CR' to run Random Forest: Classification\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'Q' to quit\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  result = switch(  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    readline(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"K\"= runK(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"N\"= runN(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"CR\"= runCR(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"PP\"= runCR(), ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"Q\"= break",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  )",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "CR",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "K",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "runK <- function(){print(\"Running K\")}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "runN <- function(){neural_network()}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "runCR <- function(){class_rf()}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "repeat{",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'K' to run KNN\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'N'to run Neural Network\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'CR' to run Random Forest: Classification\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  print(\"Enter 'Q' to quit\")",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  result = switch(  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    readline(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"K\"= runK(),  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"N\"= runN(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"CR\"= runCR(),",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"PP\"= runCR(), ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "    \"Q\"= break",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  )",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "  ",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "K",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "Q",
        "> ",
        "regression_rf()",
        "Error in regression_rf() : could not find function \"regression_rf\"\n",
        "> ",
        "source(\"neural_network.R\")",
        "Error in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\n",
        "> ",
        "source(\"classification_rf.R\")",
        "> ",
        "source(\"regression_rf.R\")",
        "> ",
        "runK <- function(){print(\"Running K\")}#KNN",
        "> ",
        "runN <- function(){neural_network()}#Neural Network",
        "> ",
        "runCF <- function(){class_rf()} #Random Forest: Classification",
        "> ",
        "runRF <- function(){regression_rf()} #Random Forest: Classification",
        "> ",
        "",
        "> ",
        "repeat{",
        "+ ",
        "  print(\"Enter 'K' to run KNN\")",
        "+ ",
        "  print(\"Enter 'N'to run Neural Network\")",
        "+ ",
        "  print(\"Enter 'CR' to run Random Forest: Classification\")",
        "+ ",
        "  print(\"Enter 'Q' to quit\")",
        "+ ",
        "  result = switch(  ",
        "+ ",
        "    readline(),  ",
        "+ ",
        "    \"K\"= runK(),  ",
        "+ ",
        "    \"N\"= runN(),",
        "+ ",
        "    \"CR\"= runCR(),",
        "+ ",
        "    \"PP\"= runCR(), ",
        "+ ",
        "    \"Q\"= break",
        "+ ",
        "  )",
        "+ ",
        "  ",
        "+ ",
        "}",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n",
        "",
        "regression_rf()",
        "[1] \"Enter 'K' to run KNN\"\n[1] \"Enter 'N'to run Neural Network\"\n[1] \"Enter 'CR' to run Random Forest: Classification\"\n[1] \"Enter 'Q' to quit\"\n\nRestarting R session...\n\n"
    ]
}